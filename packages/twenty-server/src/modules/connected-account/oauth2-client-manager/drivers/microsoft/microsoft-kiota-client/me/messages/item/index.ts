/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createMessageFromDiscriminatorValue, serializeMessage, type Message } from '../../../models/index.js';
// @ts-ignore
import { createODataErrorFromDiscriminatorValue, type ODataError } from '../../../models/oDataErrors/index.js';
// @ts-ignore
import { AttachmentsRequestBuilderNavigationMetadata, AttachmentsRequestBuilderRequestsMetadata, type AttachmentsRequestBuilder } from './attachments/index.js';
// @ts-ignore
import { CopyRequestBuilderRequestsMetadata, type CopyRequestBuilder } from './copy/index.js';
// @ts-ignore
import { CreateForwardRequestBuilderRequestsMetadata, type CreateForwardRequestBuilder } from './createForward/index.js';
// @ts-ignore
import { CreateReplyRequestBuilderRequestsMetadata, type CreateReplyRequestBuilder } from './createReply/index.js';
// @ts-ignore
import { CreateReplyAllRequestBuilderRequestsMetadata, type CreateReplyAllRequestBuilder } from './createReplyAll/index.js';
// @ts-ignore
import { ExtensionsRequestBuilderNavigationMetadata, ExtensionsRequestBuilderRequestsMetadata, type ExtensionsRequestBuilder } from './extensions/index.js';
// @ts-ignore
import { ForwardRequestBuilderRequestsMetadata, type ForwardRequestBuilder } from './forward/index.js';
// @ts-ignore
import { MoveRequestBuilderRequestsMetadata, type MoveRequestBuilder } from './move/index.js';
// @ts-ignore
import { PermanentDeleteRequestBuilderRequestsMetadata, type PermanentDeleteRequestBuilder } from './permanentDelete/index.js';
// @ts-ignore
import { ReplyRequestBuilderRequestsMetadata, type ReplyRequestBuilder } from './reply/index.js';
// @ts-ignore
import { ReplyAllRequestBuilderRequestsMetadata, type ReplyAllRequestBuilder } from './replyAll/index.js';
// @ts-ignore
import { SendRequestBuilderRequestsMetadata, type SendRequestBuilder } from './send/index.js';
// @ts-ignore
import { ContentRequestBuilderRequestsMetadata, type ContentRequestBuilder } from './value/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the messages property of the microsoft.graph.user entity.
 */
export interface MessageItemRequestBuilder extends BaseRequestBuilder<MessageItemRequestBuilder> {
    /**
     * Provides operations to manage the attachments property of the microsoft.graph.message entity.
     */
    get attachments(): AttachmentsRequestBuilder;
    /**
     * Provides operations to manage the media for the user entity.
     */
    get content(): ContentRequestBuilder;
    /**
     * Provides operations to call the copy method.
     */
    get copy(): CopyRequestBuilder;
    /**
     * Provides operations to call the createForward method.
     */
    get createForward(): CreateForwardRequestBuilder;
    /**
     * Provides operations to call the createReply method.
     */
    get createReply(): CreateReplyRequestBuilder;
    /**
     * Provides operations to call the createReplyAll method.
     */
    get createReplyAll(): CreateReplyAllRequestBuilder;
    /**
     * Provides operations to manage the extensions property of the microsoft.graph.message entity.
     */
    get extensions(): ExtensionsRequestBuilder;
    /**
     * Provides operations to call the forward method.
     */
    get forward(): ForwardRequestBuilder;
    /**
     * Provides operations to call the move method.
     */
    get move(): MoveRequestBuilder;
    /**
     * Provides operations to call the permanentDelete method.
     */
    get permanentDelete(): PermanentDeleteRequestBuilder;
    /**
     * Provides operations to call the reply method.
     */
    get reply(): ReplyRequestBuilder;
    /**
     * Provides operations to call the replyAll method.
     */
    get replyAll(): ReplyAllRequestBuilder;
    /**
     * Provides operations to call the send method.
     */
    get send(): SendRequestBuilder;
    /**
     * Delete eventMessage.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     * @see {@link https://learn.microsoft.com/graph/api/eventmessage-delete?view=graph-rest-1.0|Find more info here}
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * You can get a single resource instance expanded with a specific extended property, or a collection of resource instancesthat include extended properties matching a filter. Using the query parameter $expand allows you to get the specified resource instance expanded with a specific extendedproperty. Use a $filter and eq operator on the id property to specify the extended property. This is currently the only way to get the singleValueLegacyExtendedProperty object that represents an extended property. To get resource instances that have certain extended properties, use the $filter query parameter and apply an eq operatoron the id property. In addition, for numeric extended properties, apply one of the following operators on the value property:eq, ne,ge, gt, le, or lt. For string-typed extended properties, apply a contains, startswith, eq, or ne operator on value. The filter is applied to all instances of the resource in the signed-in user's mailbox. Filtering the string name (Name) in the id of an extended property is case-sensitive. Filtering the value property of an extendedproperty is case-insensitive. The following user resources are supported: As well as the following group resources: See Extended properties overview for more information about when to useopen extensions or extended properties, and how to specify extended properties.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<Message>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     * @see {@link https://learn.microsoft.com/graph/api/singlevaluelegacyextendedproperty-get?view=graph-rest-1.0|Find more info here}
     */
     get(requestConfiguration?: RequestConfiguration<MessageItemRequestBuilderGetQueryParameters> | undefined) : Promise<Message | undefined>;
    /**
     * Update the properties of a message object.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<Message>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     * @see {@link https://learn.microsoft.com/graph/api/message-update?view=graph-rest-1.0|Find more info here}
     */
     patch(body: Message, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<Message | undefined>;
    /**
     * Delete eventMessage.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * You can get a single resource instance expanded with a specific extended property, or a collection of resource instancesthat include extended properties matching a filter. Using the query parameter $expand allows you to get the specified resource instance expanded with a specific extendedproperty. Use a $filter and eq operator on the id property to specify the extended property. This is currently the only way to get the singleValueLegacyExtendedProperty object that represents an extended property. To get resource instances that have certain extended properties, use the $filter query parameter and apply an eq operatoron the id property. In addition, for numeric extended properties, apply one of the following operators on the value property:eq, ne,ge, gt, le, or lt. For string-typed extended properties, apply a contains, startswith, eq, or ne operator on value. The filter is applied to all instances of the resource in the signed-in user's mailbox. Filtering the string name (Name) in the id of an extended property is case-sensitive. Filtering the value property of an extendedproperty is case-insensitive. The following user resources are supported: As well as the following group resources: See Extended properties overview for more information about when to useopen extensions or extended properties, and how to specify extended properties.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<MessageItemRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update the properties of a message object.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPatchRequestInformation(body: Message, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * You can get a single resource instance expanded with a specific extended property, or a collection of resource instancesthat include extended properties matching a filter. Using the query parameter $expand allows you to get the specified resource instance expanded with a specific extendedproperty. Use a $filter and eq operator on the id property to specify the extended property. This is currently the only way to get the singleValueLegacyExtendedProperty object that represents an extended property. To get resource instances that have certain extended properties, use the $filter query parameter and apply an eq operatoron the id property. In addition, for numeric extended properties, apply one of the following operators on the value property:eq, ne,ge, gt, le, or lt. For string-typed extended properties, apply a contains, startswith, eq, or ne operator on value. The filter is applied to all instances of the resource in the signed-in user's mailbox. Filtering the string name (Name) in the id of an extended property is case-sensitive. Filtering the value property of an extendedproperty is case-insensitive. The following user resources are supported: As well as the following group resources: See Extended properties overview for more information about when to useopen extensions or extended properties, and how to specify extended properties.
 */
export interface MessageItemRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Select properties to be returned
     */
    select?: string[];
}
/**
 * Uri template for the request builder.
 */
export const MessageItemRequestBuilderUriTemplate = "{+baseurl}/me/messages/{message%2Did}{?%24expand,%24select}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const MessageItemRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const MessageItemRequestBuilderNavigationMetadata: Record<Exclude<keyof MessageItemRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    attachments: {
        requestsMetadata: AttachmentsRequestBuilderRequestsMetadata,
        navigationMetadata: AttachmentsRequestBuilderNavigationMetadata,
    },
    content: {
        requestsMetadata: ContentRequestBuilderRequestsMetadata,
    },
    copy: {
        requestsMetadata: CopyRequestBuilderRequestsMetadata,
    },
    createForward: {
        requestsMetadata: CreateForwardRequestBuilderRequestsMetadata,
    },
    createReply: {
        requestsMetadata: CreateReplyRequestBuilderRequestsMetadata,
    },
    createReplyAll: {
        requestsMetadata: CreateReplyAllRequestBuilderRequestsMetadata,
    },
    extensions: {
        requestsMetadata: ExtensionsRequestBuilderRequestsMetadata,
        navigationMetadata: ExtensionsRequestBuilderNavigationMetadata,
    },
    forward: {
        requestsMetadata: ForwardRequestBuilderRequestsMetadata,
    },
    move: {
        requestsMetadata: MoveRequestBuilderRequestsMetadata,
    },
    permanentDelete: {
        requestsMetadata: PermanentDeleteRequestBuilderRequestsMetadata,
    },
    reply: {
        requestsMetadata: ReplyRequestBuilderRequestsMetadata,
    },
    replyAll: {
        requestsMetadata: ReplyAllRequestBuilderRequestsMetadata,
    },
    send: {
        requestsMetadata: SendRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const MessageItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: MessageItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContent",
    },
    get: {
        uriTemplate: MessageItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createMessageFromDiscriminatorValue,
        queryParametersMapper: MessageItemRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        uriTemplate: MessageItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createMessageFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeMessage,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
