/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { type AdditionalDataHolder, type DateOnly, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface Attachment extends Entity, Parsable {
    /**
     * The MIME type.
     */
    contentType?: string | null;
    /**
     * true if the attachment is an inline attachment; otherwise, false.
     */
    isInline?: boolean | null;
    /**
     * The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
     */
    lastModifiedDateTime?: Date | null;
    /**
     * The attachment's file name.
     */
    name?: string | null;
    /**
     * The length of the attachment in bytes.
     */
    size?: number | null;
}
export interface AttachmentCollectionResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: Attachment[] | null;
}
export interface AttachmentItem extends AdditionalDataHolder, Parsable {
    /**
     * The type of attachment. Possible values are: file, item, reference. Required.
     */
    attachmentType?: AttachmentType | null;
    /**
     * The CID or Content-Id of the attachment for referencing for the in-line attachments using the <img src='cid:contentId'> tag in HTML messages. Optional.
     */
    contentId?: string | null;
    /**
     * The nature of the data in the attachment. Optional.
     */
    contentType?: string | null;
    /**
     * true if the attachment is an inline attachment; otherwise, false. Optional.
     */
    isInline?: boolean | null;
    /**
     * The display name of the attachment. This can be a descriptive string and doesn't have to be the actual file name. Required.
     */
    name?: string | null;
    /**
     * The OdataType property
     */
    odataType?: string | null;
    /**
     * The length of the attachment in bytes. Required.
     */
    size?: number | null;
}
export type AttachmentType = (typeof AttachmentTypeObject)[keyof typeof AttachmentTypeObject];
export interface Attendee extends AttendeeBase, Parsable {
    /**
     * An alternate date/time proposed by the attendee for a meeting request to start and end. If the attendee hasn't proposed another time, then this property isn't included in a response of a GET event.
     */
    proposedNewTime?: TimeSlot | null;
    /**
     * The attendee's response (none, accepted, declined, etc.) for the event and date-time that the response was sent.
     */
    status?: ResponseStatus | null;
}
export interface AttendeeBase extends Parsable, Recipient {
    /**
     * The type of attendee. The possible values are: required, optional, resource. Currently if the attendee is a person, findMeetingTimes always considers the person is of the Required type.
     */
    type?: AttendeeType | null;
}
export type AttendeeType = (typeof AttendeeTypeObject)[keyof typeof AttendeeTypeObject];
export interface BaseCollectionPaginationCountResponse extends AdditionalDataHolder, Parsable {
    /**
     * The OdataCount property
     */
    odataCount?: number | null;
    /**
     * The OdataNextLink property
     */
    odataNextLink?: string | null;
}
export interface BaseDeltaFunctionResponse extends AdditionalDataHolder, Parsable {
    /**
     * The OdataDeltaLink property
     */
    odataDeltaLink?: string | null;
    /**
     * The OdataNextLink property
     */
    odataNextLink?: string | null;
}
export type BodyType = (typeof BodyTypeObject)[keyof typeof BodyTypeObject];
export interface Calendar extends Entity, Parsable {
    /**
     * Represent the online meeting service providers that can be used to create online meetings in this calendar. Possible values are: unknown, skypeForBusiness, skypeForConsumer, teamsForBusiness.
     */
    allowedOnlineMeetingProviders?: OnlineMeetingProviderType[] | null;
    /**
     * The permissions of the users with whom the calendar is shared.
     */
    calendarPermissions?: CalendarPermission[] | null;
    /**
     * The calendar view for the calendar. Navigation property. Read-only.
     */
    calendarView?: Event[] | null;
    /**
     * true if the user can write to the calendar, false otherwise. This property is true for the user who created the calendar. This property is also true for a user who shared a calendar and granted write access.
     */
    canEdit?: boolean | null;
    /**
     * true if the user has permission to share the calendar, false otherwise. Only the user who created the calendar can share it.
     */
    canShare?: boolean | null;
    /**
     * If true, the user can read calendar items that have been marked private, false otherwise.
     */
    canViewPrivateItems?: boolean | null;
    /**
     * Identifies the version of the calendar object. Every time the calendar is changed, changeKey changes as well. This allows Exchange to apply changes to the correct version of the object. Read-only.
     */
    changeKey?: string | null;
    /**
     * Specifies the color theme to distinguish the calendar from other calendars in a UI. The property values are: auto, lightBlue, lightGreen, lightOrange, lightGray, lightYellow, lightTeal, lightPink, lightBrown, lightRed, maxColor.
     */
    color?: CalendarColor | null;
    /**
     * The default online meeting provider for meetings sent from this calendar. Possible values are: unknown, skypeForBusiness, skypeForConsumer, teamsForBusiness.
     */
    defaultOnlineMeetingProvider?: OnlineMeetingProviderType | null;
    /**
     * The events in the calendar. Navigation property. Read-only.
     */
    events?: Event[] | null;
    /**
     * The calendar color, expressed in a hex color code of three hexadecimal values, each ranging from 00 to FF and representing the red, green, or blue components of the color in the RGB color space. If the user has never explicitly set a color for the calendar, this property is empty. Read-only.
     */
    hexColor?: string | null;
    /**
     * true if this is the default calendar where new events are created by default, false otherwise.
     */
    isDefaultCalendar?: boolean | null;
    /**
     * Indicates whether this user calendar can be deleted from the user mailbox.
     */
    isRemovable?: boolean | null;
    /**
     * Indicates whether this user calendar supports tracking of meeting responses. Only meeting invites sent from users' primary calendars support tracking of meeting responses.
     */
    isTallyingResponses?: boolean | null;
    /**
     * The collection of multi-value extended properties defined for the calendar. Read-only. Nullable.
     */
    multiValueExtendedProperties?: MultiValueLegacyExtendedProperty[] | null;
    /**
     * The calendar name.
     */
    name?: string | null;
    /**
     * If set, this represents the user who created or added the calendar. For a calendar that the user created or added, the owner property is set to the user. For a calendar shared with the user, the owner property is set to the person who shared that calendar with the user.
     */
    owner?: EmailAddress | null;
    /**
     * The collection of single-value extended properties defined for the calendar. Read-only. Nullable.
     */
    singleValueExtendedProperties?: SingleValueLegacyExtendedProperty[] | null;
}
export type CalendarColor = (typeof CalendarColorObject)[keyof typeof CalendarColorObject];
export interface CalendarPermission extends Entity, Parsable {
    /**
     * List of allowed sharing or delegating permission levels for the calendar. Possible values are: none, freeBusyRead, limitedRead, read, write, delegateWithoutPrivateEventAccess, delegateWithPrivateEventAccess, custom.
     */
    allowedRoles?: CalendarRoleType[] | null;
    /**
     * Represents a share recipient or delegate who has access to the calendar. For the 'My Organization' share recipient, the address property is null. Read-only.
     */
    emailAddress?: EmailAddress | null;
    /**
     * True if the user in context (recipient or delegate) is inside the same organization as the calendar owner.
     */
    isInsideOrganization?: boolean | null;
    /**
     * True if the user can be removed from the list of recipients or delegates for the specified calendar, false otherwise. The 'My organization' user determines the permissions other people within your organization have to the given calendar. You can't remove 'My organization' as a share recipient to a calendar.
     */
    isRemovable?: boolean | null;
    /**
     * Current permission level of the calendar share recipient or delegate.
     */
    role?: CalendarRoleType | null;
}
export type CalendarRoleType = (typeof CalendarRoleTypeObject)[keyof typeof CalendarRoleTypeObject];
export type CalendarSharingAction = (typeof CalendarSharingActionObject)[keyof typeof CalendarSharingActionObject];
export type CalendarSharingActionImportance = (typeof CalendarSharingActionImportanceObject)[keyof typeof CalendarSharingActionImportanceObject];
export type CalendarSharingActionType = (typeof CalendarSharingActionTypeObject)[keyof typeof CalendarSharingActionTypeObject];
export interface CalendarSharingMessage extends Message, Parsable {
    /**
     * The canAccept property
     */
    canAccept?: boolean | null;
    /**
     * The sharingMessageAction property
     */
    sharingMessageAction?: CalendarSharingMessageAction | null;
    /**
     * The sharingMessageActions property
     */
    sharingMessageActions?: CalendarSharingMessageAction[] | null;
    /**
     * The suggestedCalendarName property
     */
    suggestedCalendarName?: string | null;
}
export interface CalendarSharingMessageAction extends AdditionalDataHolder, Parsable {
    /**
     * The action property
     */
    action?: CalendarSharingAction | null;
    /**
     * The actionType property
     */
    actionType?: CalendarSharingActionType | null;
    /**
     * The importance property
     */
    importance?: CalendarSharingActionImportance | null;
    /**
     * The OdataType property
     */
    odataType?: string | null;
}
export interface Contact extends OutlookItem, Parsable {
    /**
     * The name of the contact's assistant.
     */
    assistantName?: string | null;
    /**
     * The contact's birthday. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
     */
    birthday?: Date | null;
    /**
     * The contact's business address.
     */
    businessAddress?: PhysicalAddress | null;
    /**
     * The business home page of the contact.
     */
    businessHomePage?: string | null;
    /**
     * The contact's business phone numbers.
     */
    businessPhones?: string[] | null;
    /**
     * The names of the contact's children.
     */
    children?: string[] | null;
    /**
     * The name of the contact's company.
     */
    companyName?: string | null;
    /**
     * The contact's department.
     */
    department?: string | null;
    /**
     * The contact's display name. You can specify the display name in a create or update operation. Note that later updates to other properties may cause an automatically generated value to overwrite the displayName value you have specified. To preserve a pre-existing value, always include it as displayName in an update operation.
     */
    displayName?: string | null;
    /**
     * The contact's email addresses.
     */
    emailAddresses?: EmailAddress[] | null;
    /**
     * The collection of open extensions defined for the contact. Read-only. Nullable.
     */
    extensions?: Extension[] | null;
    /**
     * The name the contact is filed under.
     */
    fileAs?: string | null;
    /**
     * The contact's suffix.
     */
    generation?: string | null;
    /**
     * The contact's given name.
     */
    givenName?: string | null;
    /**
     * The contact's home address.
     */
    homeAddress?: PhysicalAddress | null;
    /**
     * The contact's home phone numbers.
     */
    homePhones?: string[] | null;
    /**
     * The contact's instant messaging (IM) addresses.
     */
    imAddresses?: string[] | null;
    /**
     * The contact's initials.
     */
    initials?: string | null;
    /**
     * The contact’s job title.
     */
    jobTitle?: string | null;
    /**
     * The name of the contact's manager.
     */
    manager?: string | null;
    /**
     * The contact's middle name.
     */
    middleName?: string | null;
    /**
     * The contact's mobile phone number.
     */
    mobilePhone?: string | null;
    /**
     * The collection of multi-value extended properties defined for the contact. Read-only. Nullable.
     */
    multiValueExtendedProperties?: MultiValueLegacyExtendedProperty[] | null;
    /**
     * The contact's nickname.
     */
    nickName?: string | null;
    /**
     * The location of the contact's office.
     */
    officeLocation?: string | null;
    /**
     * Other addresses for the contact.
     */
    otherAddress?: PhysicalAddress | null;
    /**
     * The ID of the contact's parent folder.
     */
    parentFolderId?: string | null;
    /**
     * The user's notes about the contact.
     */
    personalNotes?: string | null;
    /**
     * Optional contact picture. You can get or set a photo for a contact.
     */
    photo?: ProfilePhoto | null;
    /**
     * The contact's profession.
     */
    profession?: string | null;
    /**
     * The collection of single-value extended properties defined for the contact. Read-only. Nullable.
     */
    singleValueExtendedProperties?: SingleValueLegacyExtendedProperty[] | null;
    /**
     * The name of the contact's spouse/partner.
     */
    spouseName?: string | null;
    /**
     * The contact's surname.
     */
    surname?: string | null;
    /**
     * The contact's title.
     */
    title?: string | null;
    /**
     * The phonetic Japanese company name of the contact.
     */
    yomiCompanyName?: string | null;
    /**
     * The phonetic Japanese given name (first name) of the contact.
     */
    yomiGivenName?: string | null;
    /**
     * The phonetic Japanese surname (last name)  of the contact.
     */
    yomiSurname?: string | null;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {AttachmentCollectionResponse}
 */
// @ts-ignore
export function createAttachmentCollectionResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoAttachmentCollectionResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Attachment}
 */
// @ts-ignore
export function createAttachmentFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode?.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.fileAttachment":
                    return deserializeIntoFileAttachment;
                case "#microsoft.graph.itemAttachment":
                    return deserializeIntoItemAttachment;
                case "#microsoft.graph.referenceAttachment":
                    return deserializeIntoReferenceAttachment;
            }
        }
    }
    return deserializeIntoAttachment;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {AttachmentItem}
 */
// @ts-ignore
export function createAttachmentItemFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoAttachmentItem;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {AttendeeBase}
 */
// @ts-ignore
export function createAttendeeBaseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode?.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.attendee":
                    return deserializeIntoAttendee;
            }
        }
    }
    return deserializeIntoAttendeeBase;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Attendee}
 */
// @ts-ignore
export function createAttendeeFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoAttendee;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {BaseCollectionPaginationCountResponse}
 */
// @ts-ignore
export function createBaseCollectionPaginationCountResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoBaseCollectionPaginationCountResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {BaseDeltaFunctionResponse}
 */
// @ts-ignore
export function createBaseDeltaFunctionResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoBaseDeltaFunctionResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Calendar}
 */
// @ts-ignore
export function createCalendarFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoCalendar;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {CalendarPermission}
 */
// @ts-ignore
export function createCalendarPermissionFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoCalendarPermission;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {CalendarSharingMessageAction}
 */
// @ts-ignore
export function createCalendarSharingMessageActionFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoCalendarSharingMessageAction;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {CalendarSharingMessage}
 */
// @ts-ignore
export function createCalendarSharingMessageFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoCalendarSharingMessage;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Contact}
 */
// @ts-ignore
export function createContactFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoContact;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {DateTimeTimeZone}
 */
// @ts-ignore
export function createDateTimeTimeZoneFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoDateTimeTimeZone;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {EmailAddress}
 */
// @ts-ignore
export function createEmailAddressFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoEmailAddress;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Entity}
 */
// @ts-ignore
export function createEntityFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode?.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.attachment":
                    return deserializeIntoAttachment;
                case "#microsoft.graph.calendar":
                    return deserializeIntoCalendar;
                case "#microsoft.graph.calendarPermission":
                    return deserializeIntoCalendarPermission;
                case "#microsoft.graph.calendarSharingMessage":
                    return deserializeIntoCalendarSharingMessage;
                case "#microsoft.graph.contact":
                    return deserializeIntoContact;
                case "#microsoft.graph.event":
                    return deserializeIntoEvent;
                case "#microsoft.graph.eventMessage":
                    return deserializeIntoEventMessage;
                case "#microsoft.graph.eventMessageRequest":
                    return deserializeIntoEventMessageRequest;
                case "#microsoft.graph.eventMessageResponse":
                    return deserializeIntoEventMessageResponse;
                case "#microsoft.graph.extension":
                    return deserializeIntoExtension;
                case "#microsoft.graph.fileAttachment":
                    return deserializeIntoFileAttachment;
                case "#microsoft.graph.itemAttachment":
                    return deserializeIntoItemAttachment;
                case "#microsoft.graph.mailFolder":
                    return deserializeIntoMailFolder;
                case "#microsoft.graph.mailSearchFolder":
                    return deserializeIntoMailSearchFolder;
                case "#microsoft.graph.message":
                    return deserializeIntoMessage;
                case "#microsoft.graph.messageRule":
                    return deserializeIntoMessageRule;
                case "#microsoft.graph.multiValueLegacyExtendedProperty":
                    return deserializeIntoMultiValueLegacyExtendedProperty;
                case "#microsoft.graph.openTypeExtension":
                    return deserializeIntoOpenTypeExtension;
                case "#microsoft.graph.outlookItem":
                    return deserializeIntoOutlookItem;
                case "#microsoft.graph.post":
                    return deserializeIntoPost;
                case "#microsoft.graph.profilePhoto":
                    return deserializeIntoProfilePhoto;
                case "#microsoft.graph.referenceAttachment":
                    return deserializeIntoReferenceAttachment;
                case "#microsoft.graph.singleValueLegacyExtendedProperty":
                    return deserializeIntoSingleValueLegacyExtendedProperty;
            }
        }
    }
    return deserializeIntoEntity;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {EventCollectionResponse}
 */
// @ts-ignore
export function createEventCollectionResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoEventCollectionResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Event}
 */
// @ts-ignore
export function createEventFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoEvent;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {EventMessage}
 */
// @ts-ignore
export function createEventMessageFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode?.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.eventMessageRequest":
                    return deserializeIntoEventMessageRequest;
                case "#microsoft.graph.eventMessageResponse":
                    return deserializeIntoEventMessageResponse;
            }
        }
    }
    return deserializeIntoEventMessage;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {EventMessageRequest}
 */
// @ts-ignore
export function createEventMessageRequestFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoEventMessageRequest;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {EventMessageResponse}
 */
// @ts-ignore
export function createEventMessageResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoEventMessageResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ExtensionCollectionResponse}
 */
// @ts-ignore
export function createExtensionCollectionResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoExtensionCollectionResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Extension}
 */
// @ts-ignore
export function createExtensionFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode?.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.openTypeExtension":
                    return deserializeIntoOpenTypeExtension;
            }
        }
    }
    return deserializeIntoExtension;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {FileAttachment}
 */
// @ts-ignore
export function createFileAttachmentFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoFileAttachment;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {FollowupFlag}
 */
// @ts-ignore
export function createFollowupFlagFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoFollowupFlag;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {InternetMessageHeader}
 */
// @ts-ignore
export function createInternetMessageHeaderFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoInternetMessageHeader;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ItemAttachment}
 */
// @ts-ignore
export function createItemAttachmentFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoItemAttachment;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ItemBody}
 */
// @ts-ignore
export function createItemBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoItemBody;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {LocationConstraintItem}
 */
// @ts-ignore
export function createLocationConstraintItemFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoLocationConstraintItem;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Location}
 */
// @ts-ignore
export function createLocationFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode?.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.locationConstraintItem":
                    return deserializeIntoLocationConstraintItem;
            }
        }
    }
    return deserializeIntoLocation;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {MailFolderCollectionResponse}
 */
// @ts-ignore
export function createMailFolderCollectionResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoMailFolderCollectionResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {MailFolder}
 */
// @ts-ignore
export function createMailFolderFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode?.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.mailSearchFolder":
                    return deserializeIntoMailSearchFolder;
            }
        }
    }
    return deserializeIntoMailFolder;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {MailSearchFolder}
 */
// @ts-ignore
export function createMailSearchFolderFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoMailSearchFolder;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {MessageCollectionResponse}
 */
// @ts-ignore
export function createMessageCollectionResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoMessageCollectionResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Message}
 */
// @ts-ignore
export function createMessageFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode?.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.calendarSharingMessage":
                    return deserializeIntoCalendarSharingMessage;
                case "#microsoft.graph.eventMessage":
                    return deserializeIntoEventMessage;
                case "#microsoft.graph.eventMessageRequest":
                    return deserializeIntoEventMessageRequest;
                case "#microsoft.graph.eventMessageResponse":
                    return deserializeIntoEventMessageResponse;
            }
        }
    }
    return deserializeIntoMessage;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {MessageRuleActions}
 */
// @ts-ignore
export function createMessageRuleActionsFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoMessageRuleActions;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {MessageRuleCollectionResponse}
 */
// @ts-ignore
export function createMessageRuleCollectionResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoMessageRuleCollectionResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {MessageRule}
 */
// @ts-ignore
export function createMessageRuleFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoMessageRule;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {MessageRulePredicates}
 */
// @ts-ignore
export function createMessageRulePredicatesFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoMessageRulePredicates;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {MultiValueLegacyExtendedProperty}
 */
// @ts-ignore
export function createMultiValueLegacyExtendedPropertyFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoMultiValueLegacyExtendedProperty;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {OnlineMeetingInfo}
 */
// @ts-ignore
export function createOnlineMeetingInfoFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoOnlineMeetingInfo;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {OpenTypeExtension}
 */
// @ts-ignore
export function createOpenTypeExtensionFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoOpenTypeExtension;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {OutlookGeoCoordinates}
 */
// @ts-ignore
export function createOutlookGeoCoordinatesFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoOutlookGeoCoordinates;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {OutlookItem}
 */
// @ts-ignore
export function createOutlookItemFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode?.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.calendarSharingMessage":
                    return deserializeIntoCalendarSharingMessage;
                case "#microsoft.graph.contact":
                    return deserializeIntoContact;
                case "#microsoft.graph.event":
                    return deserializeIntoEvent;
                case "#microsoft.graph.eventMessage":
                    return deserializeIntoEventMessage;
                case "#microsoft.graph.eventMessageRequest":
                    return deserializeIntoEventMessageRequest;
                case "#microsoft.graph.eventMessageResponse":
                    return deserializeIntoEventMessageResponse;
                case "#microsoft.graph.message":
                    return deserializeIntoMessage;
                case "#microsoft.graph.post":
                    return deserializeIntoPost;
            }
        }
    }
    return deserializeIntoOutlookItem;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {PatternedRecurrence}
 */
// @ts-ignore
export function createPatternedRecurrenceFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoPatternedRecurrence;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Phone}
 */
// @ts-ignore
export function createPhoneFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoPhone;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {PhysicalAddress}
 */
// @ts-ignore
export function createPhysicalAddressFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoPhysicalAddress;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Post}
 */
// @ts-ignore
export function createPostFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoPost;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ProfilePhoto}
 */
// @ts-ignore
export function createProfilePhotoFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoProfilePhoto;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Recipient}
 */
// @ts-ignore
export function createRecipientFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode?.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.attendee":
                    return deserializeIntoAttendee;
                case "#microsoft.graph.attendeeBase":
                    return deserializeIntoAttendeeBase;
            }
        }
    }
    return deserializeIntoRecipient;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {RecurrencePattern}
 */
// @ts-ignore
export function createRecurrencePatternFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoRecurrencePattern;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {RecurrenceRange}
 */
// @ts-ignore
export function createRecurrenceRangeFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoRecurrenceRange;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ReferenceAttachment}
 */
// @ts-ignore
export function createReferenceAttachmentFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoReferenceAttachment;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ResponseStatus}
 */
// @ts-ignore
export function createResponseStatusFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoResponseStatus;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {SingleValueLegacyExtendedProperty}
 */
// @ts-ignore
export function createSingleValueLegacyExtendedPropertyFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoSingleValueLegacyExtendedProperty;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {SizeRange}
 */
// @ts-ignore
export function createSizeRangeFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoSizeRange;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {TimeSlot}
 */
// @ts-ignore
export function createTimeSlotFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoTimeSlot;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {UploadSession}
 */
// @ts-ignore
export function createUploadSessionFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoUploadSession;
}
export interface DateTimeTimeZone extends AdditionalDataHolder, Parsable {
    /**
     * A single point of time in a combined date and time representation ({date}T{time}; for example, 2017-08-29T04:00:00.0000000).
     */
    dateTime?: string | null;
    /**
     * The OdataType property
     */
    odataType?: string | null;
    /**
     * Represents a time zone, for example, 'Pacific Standard Time'. See below for more possible values.
     */
    timeZone?: string | null;
}
export type DayOfWeek = (typeof DayOfWeekObject)[keyof typeof DayOfWeekObject];
/**
 * The deserialization information for the current model
 * @param Attachment The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoAttachment(attachment: Partial<Attachment> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(attachment),
        "contentType": n => { attachment.contentType = n.getStringValue(); },
        "isInline": n => { attachment.isInline = n.getBooleanValue(); },
        "lastModifiedDateTime": n => { attachment.lastModifiedDateTime = n.getDateValue(); },
        "name": n => { attachment.name = n.getStringValue(); },
        "size": n => { attachment.size = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param AttachmentCollectionResponse The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoAttachmentCollectionResponse(attachmentCollectionResponse: Partial<AttachmentCollectionResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(attachmentCollectionResponse),
        "value": n => { attachmentCollectionResponse.value = n.getCollectionOfObjectValues<Attachment>(createAttachmentFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @param AttachmentItem The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoAttachmentItem(attachmentItem: Partial<AttachmentItem> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "attachmentType": n => { attachmentItem.attachmentType = n.getEnumValue<AttachmentType>(AttachmentTypeObject); },
        "contentId": n => { attachmentItem.contentId = n.getStringValue(); },
        "contentType": n => { attachmentItem.contentType = n.getStringValue(); },
        "isInline": n => { attachmentItem.isInline = n.getBooleanValue(); },
        "name": n => { attachmentItem.name = n.getStringValue(); },
        "@odata.type": n => { attachmentItem.odataType = n.getStringValue(); },
        "size": n => { attachmentItem.size = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param Attendee The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoAttendee(attendee: Partial<Attendee> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoAttendeeBase(attendee),
        "proposedNewTime": n => { attendee.proposedNewTime = n.getObjectValue<TimeSlot>(createTimeSlotFromDiscriminatorValue); },
        "status": n => { attendee.status = n.getObjectValue<ResponseStatus>(createResponseStatusFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @param AttendeeBase The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoAttendeeBase(attendeeBase: Partial<AttendeeBase> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoRecipient(attendeeBase),
        "type": n => { attendeeBase.type = n.getEnumValue<AttendeeType>(AttendeeTypeObject); },
    }
}
/**
 * The deserialization information for the current model
 * @param BaseCollectionPaginationCountResponse The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoBaseCollectionPaginationCountResponse(baseCollectionPaginationCountResponse: Partial<BaseCollectionPaginationCountResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "@odata.count": n => { baseCollectionPaginationCountResponse.odataCount = n.getNumberValue(); },
        "@odata.nextLink": n => { baseCollectionPaginationCountResponse.odataNextLink = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param BaseDeltaFunctionResponse The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoBaseDeltaFunctionResponse(baseDeltaFunctionResponse: Partial<BaseDeltaFunctionResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "@odata.deltaLink": n => { baseDeltaFunctionResponse.odataDeltaLink = n.getStringValue(); },
        "@odata.nextLink": n => { baseDeltaFunctionResponse.odataNextLink = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param Calendar The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoCalendar(calendar: Partial<Calendar> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(calendar),
        "allowedOnlineMeetingProviders": n => { calendar.allowedOnlineMeetingProviders = n.getCollectionOfEnumValues<OnlineMeetingProviderType>(OnlineMeetingProviderTypeObject); },
        "calendarPermissions": n => { calendar.calendarPermissions = n.getCollectionOfObjectValues<CalendarPermission>(createCalendarPermissionFromDiscriminatorValue); },
        "calendarView": n => { calendar.calendarView = n.getCollectionOfObjectValues<Event>(createEventFromDiscriminatorValue); },
        "canEdit": n => { calendar.canEdit = n.getBooleanValue(); },
        "canShare": n => { calendar.canShare = n.getBooleanValue(); },
        "canViewPrivateItems": n => { calendar.canViewPrivateItems = n.getBooleanValue(); },
        "changeKey": n => { calendar.changeKey = n.getStringValue(); },
        "color": n => { calendar.color = n.getEnumValue<CalendarColor>(CalendarColorObject); },
        "defaultOnlineMeetingProvider": n => { calendar.defaultOnlineMeetingProvider = n.getEnumValue<OnlineMeetingProviderType>(OnlineMeetingProviderTypeObject); },
        "events": n => { calendar.events = n.getCollectionOfObjectValues<Event>(createEventFromDiscriminatorValue); },
        "hexColor": n => { calendar.hexColor = n.getStringValue(); },
        "isDefaultCalendar": n => { calendar.isDefaultCalendar = n.getBooleanValue(); },
        "isRemovable": n => { calendar.isRemovable = n.getBooleanValue(); },
        "isTallyingResponses": n => { calendar.isTallyingResponses = n.getBooleanValue(); },
        "multiValueExtendedProperties": n => { calendar.multiValueExtendedProperties = n.getCollectionOfObjectValues<MultiValueLegacyExtendedProperty>(createMultiValueLegacyExtendedPropertyFromDiscriminatorValue); },
        "name": n => { calendar.name = n.getStringValue(); },
        "owner": n => { calendar.owner = n.getObjectValue<EmailAddress>(createEmailAddressFromDiscriminatorValue); },
        "singleValueExtendedProperties": n => { calendar.singleValueExtendedProperties = n.getCollectionOfObjectValues<SingleValueLegacyExtendedProperty>(createSingleValueLegacyExtendedPropertyFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @param CalendarPermission The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoCalendarPermission(calendarPermission: Partial<CalendarPermission> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(calendarPermission),
        "allowedRoles": n => { calendarPermission.allowedRoles = n.getCollectionOfEnumValues<CalendarRoleType>(CalendarRoleTypeObject); },
        "emailAddress": n => { calendarPermission.emailAddress = n.getObjectValue<EmailAddress>(createEmailAddressFromDiscriminatorValue); },
        "isInsideOrganization": n => { calendarPermission.isInsideOrganization = n.getBooleanValue(); },
        "isRemovable": n => { calendarPermission.isRemovable = n.getBooleanValue(); },
        "role": n => { calendarPermission.role = n.getEnumValue<CalendarRoleType>(CalendarRoleTypeObject); },
    }
}
/**
 * The deserialization information for the current model
 * @param CalendarSharingMessage The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoCalendarSharingMessage(calendarSharingMessage: Partial<CalendarSharingMessage> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoMessage(calendarSharingMessage),
        "canAccept": n => { calendarSharingMessage.canAccept = n.getBooleanValue(); },
        "sharingMessageAction": n => { calendarSharingMessage.sharingMessageAction = n.getObjectValue<CalendarSharingMessageAction>(createCalendarSharingMessageActionFromDiscriminatorValue); },
        "sharingMessageActions": n => { calendarSharingMessage.sharingMessageActions = n.getCollectionOfObjectValues<CalendarSharingMessageAction>(createCalendarSharingMessageActionFromDiscriminatorValue); },
        "suggestedCalendarName": n => { calendarSharingMessage.suggestedCalendarName = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param CalendarSharingMessageAction The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoCalendarSharingMessageAction(calendarSharingMessageAction: Partial<CalendarSharingMessageAction> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "action": n => { calendarSharingMessageAction.action = n.getEnumValue<CalendarSharingAction>(CalendarSharingActionObject); },
        "actionType": n => { calendarSharingMessageAction.actionType = n.getEnumValue<CalendarSharingActionType>(CalendarSharingActionTypeObject); },
        "importance": n => { calendarSharingMessageAction.importance = n.getEnumValue<CalendarSharingActionImportance>(CalendarSharingActionImportanceObject); },
        "@odata.type": n => { calendarSharingMessageAction.odataType = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param Contact The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoContact(contact: Partial<Contact> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoOutlookItem(contact),
        "assistantName": n => { contact.assistantName = n.getStringValue(); },
        "birthday": n => { contact.birthday = n.getDateValue(); },
        "businessAddress": n => { contact.businessAddress = n.getObjectValue<PhysicalAddress>(createPhysicalAddressFromDiscriminatorValue); },
        "businessHomePage": n => { contact.businessHomePage = n.getStringValue(); },
        "businessPhones": n => { contact.businessPhones = n.getCollectionOfPrimitiveValues<string>(); },
        "children": n => { contact.children = n.getCollectionOfPrimitiveValues<string>(); },
        "companyName": n => { contact.companyName = n.getStringValue(); },
        "department": n => { contact.department = n.getStringValue(); },
        "displayName": n => { contact.displayName = n.getStringValue(); },
        "emailAddresses": n => { contact.emailAddresses = n.getCollectionOfObjectValues<EmailAddress>(createEmailAddressFromDiscriminatorValue); },
        "extensions": n => { contact.extensions = n.getCollectionOfObjectValues<Extension>(createExtensionFromDiscriminatorValue); },
        "fileAs": n => { contact.fileAs = n.getStringValue(); },
        "generation": n => { contact.generation = n.getStringValue(); },
        "givenName": n => { contact.givenName = n.getStringValue(); },
        "homeAddress": n => { contact.homeAddress = n.getObjectValue<PhysicalAddress>(createPhysicalAddressFromDiscriminatorValue); },
        "homePhones": n => { contact.homePhones = n.getCollectionOfPrimitiveValues<string>(); },
        "imAddresses": n => { contact.imAddresses = n.getCollectionOfPrimitiveValues<string>(); },
        "initials": n => { contact.initials = n.getStringValue(); },
        "jobTitle": n => { contact.jobTitle = n.getStringValue(); },
        "manager": n => { contact.manager = n.getStringValue(); },
        "middleName": n => { contact.middleName = n.getStringValue(); },
        "mobilePhone": n => { contact.mobilePhone = n.getStringValue(); },
        "multiValueExtendedProperties": n => { contact.multiValueExtendedProperties = n.getCollectionOfObjectValues<MultiValueLegacyExtendedProperty>(createMultiValueLegacyExtendedPropertyFromDiscriminatorValue); },
        "nickName": n => { contact.nickName = n.getStringValue(); },
        "officeLocation": n => { contact.officeLocation = n.getStringValue(); },
        "otherAddress": n => { contact.otherAddress = n.getObjectValue<PhysicalAddress>(createPhysicalAddressFromDiscriminatorValue); },
        "parentFolderId": n => { contact.parentFolderId = n.getStringValue(); },
        "personalNotes": n => { contact.personalNotes = n.getStringValue(); },
        "photo": n => { contact.photo = n.getObjectValue<ProfilePhoto>(createProfilePhotoFromDiscriminatorValue); },
        "profession": n => { contact.profession = n.getStringValue(); },
        "singleValueExtendedProperties": n => { contact.singleValueExtendedProperties = n.getCollectionOfObjectValues<SingleValueLegacyExtendedProperty>(createSingleValueLegacyExtendedPropertyFromDiscriminatorValue); },
        "spouseName": n => { contact.spouseName = n.getStringValue(); },
        "surname": n => { contact.surname = n.getStringValue(); },
        "title": n => { contact.title = n.getStringValue(); },
        "yomiCompanyName": n => { contact.yomiCompanyName = n.getStringValue(); },
        "yomiGivenName": n => { contact.yomiGivenName = n.getStringValue(); },
        "yomiSurname": n => { contact.yomiSurname = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param DateTimeTimeZone The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoDateTimeTimeZone(dateTimeTimeZone: Partial<DateTimeTimeZone> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "dateTime": n => { dateTimeTimeZone.dateTime = n.getStringValue(); },
        "@odata.type": n => { dateTimeTimeZone.odataType = n.getStringValue(); },
        "timeZone": n => { dateTimeTimeZone.timeZone = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param EmailAddress The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoEmailAddress(emailAddress: Partial<EmailAddress> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "address": n => { emailAddress.address = n.getStringValue(); },
        "name": n => { emailAddress.name = n.getStringValue(); },
        "@odata.type": n => { emailAddress.odataType = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param Entity The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoEntity(entity: Partial<Entity> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "id": n => { entity.id = n.getStringValue(); },
        "@odata.type": n => { entity.odataType = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param Event The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoEvent(event: Partial<Event> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoOutlookItem(event),
        "allowNewTimeProposals": n => { event.allowNewTimeProposals = n.getBooleanValue(); },
        "attachments": n => { event.attachments = n.getCollectionOfObjectValues<Attachment>(createAttachmentFromDiscriminatorValue); },
        "attendees": n => { event.attendees = n.getCollectionOfObjectValues<Attendee>(createAttendeeFromDiscriminatorValue); },
        "body": n => { event.body = n.getObjectValue<ItemBody>(createItemBodyFromDiscriminatorValue); },
        "bodyPreview": n => { event.bodyPreview = n.getStringValue(); },
        "calendar": n => { event.calendar = n.getObjectValue<Calendar>(createCalendarFromDiscriminatorValue); },
        "cancelledOccurrences": n => { event.cancelledOccurrences = n.getCollectionOfPrimitiveValues<string>(); },
        "end": n => { event.end = n.getObjectValue<DateTimeTimeZone>(createDateTimeTimeZoneFromDiscriminatorValue); },
        "exceptionOccurrences": n => { event.exceptionOccurrences = n.getCollectionOfObjectValues<Event>(createEventFromDiscriminatorValue); },
        "extensions": n => { event.extensions = n.getCollectionOfObjectValues<Extension>(createExtensionFromDiscriminatorValue); },
        "hasAttachments": n => { event.hasAttachments = n.getBooleanValue(); },
        "hideAttendees": n => { event.hideAttendees = n.getBooleanValue(); },
        "iCalUId": n => { event.iCalUId = n.getStringValue(); },
        "importance": n => { event.importance = n.getEnumValue<Importance>(ImportanceObject); },
        "instances": n => { event.instances = n.getCollectionOfObjectValues<Event>(createEventFromDiscriminatorValue); },
        "isAllDay": n => { event.isAllDay = n.getBooleanValue(); },
        "isCancelled": n => { event.isCancelled = n.getBooleanValue(); },
        "isDraft": n => { event.isDraft = n.getBooleanValue(); },
        "isOnlineMeeting": n => { event.isOnlineMeeting = n.getBooleanValue(); },
        "isOrganizer": n => { event.isOrganizer = n.getBooleanValue(); },
        "isReminderOn": n => { event.isReminderOn = n.getBooleanValue(); },
        "location": n => { event.location = n.getObjectValue<Location>(createLocationFromDiscriminatorValue); },
        "locations": n => { event.locations = n.getCollectionOfObjectValues<Location>(createLocationFromDiscriminatorValue); },
        "multiValueExtendedProperties": n => { event.multiValueExtendedProperties = n.getCollectionOfObjectValues<MultiValueLegacyExtendedProperty>(createMultiValueLegacyExtendedPropertyFromDiscriminatorValue); },
        "onlineMeeting": n => { event.onlineMeeting = n.getObjectValue<OnlineMeetingInfo>(createOnlineMeetingInfoFromDiscriminatorValue); },
        "onlineMeetingProvider": n => { event.onlineMeetingProvider = n.getEnumValue<OnlineMeetingProviderType>(OnlineMeetingProviderTypeObject); },
        "onlineMeetingUrl": n => { event.onlineMeetingUrl = n.getStringValue(); },
        "organizer": n => { event.organizer = n.getObjectValue<Recipient>(createRecipientFromDiscriminatorValue); },
        "originalEndTimeZone": n => { event.originalEndTimeZone = n.getStringValue(); },
        "originalStart": n => { event.originalStart = n.getDateValue(); },
        "originalStartTimeZone": n => { event.originalStartTimeZone = n.getStringValue(); },
        "recurrence": n => { event.recurrence = n.getObjectValue<PatternedRecurrence>(createPatternedRecurrenceFromDiscriminatorValue); },
        "reminderMinutesBeforeStart": n => { event.reminderMinutesBeforeStart = n.getNumberValue(); },
        "responseRequested": n => { event.responseRequested = n.getBooleanValue(); },
        "responseStatus": n => { event.responseStatus = n.getObjectValue<ResponseStatus>(createResponseStatusFromDiscriminatorValue); },
        "sensitivity": n => { event.sensitivity = n.getEnumValue<Sensitivity>(SensitivityObject); },
        "seriesMasterId": n => { event.seriesMasterId = n.getStringValue(); },
        "showAs": n => { event.showAs = n.getEnumValue<FreeBusyStatus>(FreeBusyStatusObject); },
        "singleValueExtendedProperties": n => { event.singleValueExtendedProperties = n.getCollectionOfObjectValues<SingleValueLegacyExtendedProperty>(createSingleValueLegacyExtendedPropertyFromDiscriminatorValue); },
        "start": n => { event.start = n.getObjectValue<DateTimeTimeZone>(createDateTimeTimeZoneFromDiscriminatorValue); },
        "subject": n => { event.subject = n.getStringValue(); },
        "transactionId": n => { event.transactionId = n.getStringValue(); },
        "type": n => { event.type = n.getEnumValue<EventType>(EventTypeObject); },
        "webLink": n => { event.webLink = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param EventCollectionResponse The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoEventCollectionResponse(eventCollectionResponse: Partial<EventCollectionResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(eventCollectionResponse),
        "value": n => { eventCollectionResponse.value = n.getCollectionOfObjectValues<Event>(createEventFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @param EventMessage The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoEventMessage(eventMessage: Partial<EventMessage> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoMessage(eventMessage),
        "endDateTime": n => { eventMessage.endDateTime = n.getObjectValue<DateTimeTimeZone>(createDateTimeTimeZoneFromDiscriminatorValue); },
        "event": n => { eventMessage.event = n.getObjectValue<Event>(createEventFromDiscriminatorValue); },
        "isAllDay": n => { eventMessage.isAllDay = n.getBooleanValue(); },
        "isDelegated": n => { eventMessage.isDelegated = n.getBooleanValue(); },
        "isOutOfDate": n => { eventMessage.isOutOfDate = n.getBooleanValue(); },
        "location": n => { eventMessage.location = n.getObjectValue<Location>(createLocationFromDiscriminatorValue); },
        "meetingMessageType": n => { eventMessage.meetingMessageType = n.getEnumValue<MeetingMessageType>(MeetingMessageTypeObject); },
        "recurrence": n => { eventMessage.recurrence = n.getObjectValue<PatternedRecurrence>(createPatternedRecurrenceFromDiscriminatorValue); },
        "startDateTime": n => { eventMessage.startDateTime = n.getObjectValue<DateTimeTimeZone>(createDateTimeTimeZoneFromDiscriminatorValue); },
        "type": n => { eventMessage.type = n.getEnumValue<EventType>(EventTypeObject); },
    }
}
/**
 * The deserialization information for the current model
 * @param EventMessageRequest The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoEventMessageRequest(eventMessageRequest: Partial<EventMessageRequest> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEventMessage(eventMessageRequest),
        "allowNewTimeProposals": n => { eventMessageRequest.allowNewTimeProposals = n.getBooleanValue(); },
        "meetingRequestType": n => { eventMessageRequest.meetingRequestType = n.getEnumValue<MeetingRequestType>(MeetingRequestTypeObject); },
        "previousEndDateTime": n => { eventMessageRequest.previousEndDateTime = n.getObjectValue<DateTimeTimeZone>(createDateTimeTimeZoneFromDiscriminatorValue); },
        "previousLocation": n => { eventMessageRequest.previousLocation = n.getObjectValue<Location>(createLocationFromDiscriminatorValue); },
        "previousStartDateTime": n => { eventMessageRequest.previousStartDateTime = n.getObjectValue<DateTimeTimeZone>(createDateTimeTimeZoneFromDiscriminatorValue); },
        "responseRequested": n => { eventMessageRequest.responseRequested = n.getBooleanValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param EventMessageResponse The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoEventMessageResponse(eventMessageResponse: Partial<EventMessageResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEventMessage(eventMessageResponse),
        "proposedNewTime": n => { eventMessageResponse.proposedNewTime = n.getObjectValue<TimeSlot>(createTimeSlotFromDiscriminatorValue); },
        "responseType": n => { eventMessageResponse.responseType = n.getEnumValue<ResponseType>(ResponseTypeObject); },
    }
}
/**
 * The deserialization information for the current model
 * @param Extension The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoExtension(extension: Partial<Extension> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(extension),
    }
}
/**
 * The deserialization information for the current model
 * @param ExtensionCollectionResponse The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoExtensionCollectionResponse(extensionCollectionResponse: Partial<ExtensionCollectionResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(extensionCollectionResponse),
        "value": n => { extensionCollectionResponse.value = n.getCollectionOfObjectValues<Extension>(createExtensionFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @param FileAttachment The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoFileAttachment(fileAttachment: Partial<FileAttachment> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoAttachment(fileAttachment),
        "contentBytes": n => { fileAttachment.contentBytes = n.getByteArrayValue(); },
        "contentId": n => { fileAttachment.contentId = n.getStringValue(); },
        "contentLocation": n => { fileAttachment.contentLocation = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param FollowupFlag The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoFollowupFlag(followupFlag: Partial<FollowupFlag> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "completedDateTime": n => { followupFlag.completedDateTime = n.getObjectValue<DateTimeTimeZone>(createDateTimeTimeZoneFromDiscriminatorValue); },
        "dueDateTime": n => { followupFlag.dueDateTime = n.getObjectValue<DateTimeTimeZone>(createDateTimeTimeZoneFromDiscriminatorValue); },
        "flagStatus": n => { followupFlag.flagStatus = n.getEnumValue<FollowupFlagStatus>(FollowupFlagStatusObject); },
        "@odata.type": n => { followupFlag.odataType = n.getStringValue(); },
        "startDateTime": n => { followupFlag.startDateTime = n.getObjectValue<DateTimeTimeZone>(createDateTimeTimeZoneFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @param InternetMessageHeader The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoInternetMessageHeader(internetMessageHeader: Partial<InternetMessageHeader> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "name": n => { internetMessageHeader.name = n.getStringValue(); },
        "@odata.type": n => { internetMessageHeader.odataType = n.getStringValue(); },
        "value": n => { internetMessageHeader.value = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param ItemAttachment The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoItemAttachment(itemAttachment: Partial<ItemAttachment> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoAttachment(itemAttachment),
        "item": n => { itemAttachment.item = n.getObjectValue<OutlookItem>(createOutlookItemFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @param ItemBody The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoItemBody(itemBody: Partial<ItemBody> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "content": n => { itemBody.content = n.getStringValue(); },
        "contentType": n => { itemBody.contentType = n.getEnumValue<BodyType>(BodyTypeObject); },
        "@odata.type": n => { itemBody.odataType = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param Location The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoLocation(location: Partial<Location> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "address": n => { location.address = n.getObjectValue<PhysicalAddress>(createPhysicalAddressFromDiscriminatorValue); },
        "coordinates": n => { location.coordinates = n.getObjectValue<OutlookGeoCoordinates>(createOutlookGeoCoordinatesFromDiscriminatorValue); },
        "displayName": n => { location.displayName = n.getStringValue(); },
        "locationEmailAddress": n => { location.locationEmailAddress = n.getStringValue(); },
        "locationType": n => { location.locationType = n.getEnumValue<LocationType>(LocationTypeObject); },
        "locationUri": n => { location.locationUri = n.getStringValue(); },
        "@odata.type": n => { location.odataType = n.getStringValue(); },
        "uniqueId": n => { location.uniqueId = n.getStringValue(); },
        "uniqueIdType": n => { location.uniqueIdType = n.getEnumValue<LocationUniqueIdType>(LocationUniqueIdTypeObject); },
    }
}
/**
 * The deserialization information for the current model
 * @param LocationConstraintItem The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoLocationConstraintItem(locationConstraintItem: Partial<LocationConstraintItem> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoLocation(locationConstraintItem),
        "resolveAvailability": n => { locationConstraintItem.resolveAvailability = n.getBooleanValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param MailFolder The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoMailFolder(mailFolder: Partial<MailFolder> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(mailFolder),
        "childFolderCount": n => { mailFolder.childFolderCount = n.getNumberValue(); },
        "childFolders": n => { mailFolder.childFolders = n.getCollectionOfObjectValues<MailFolder>(createMailFolderFromDiscriminatorValue); },
        "displayName": n => { mailFolder.displayName = n.getStringValue(); },
        "isHidden": n => { mailFolder.isHidden = n.getBooleanValue(); },
        "messageRules": n => { mailFolder.messageRules = n.getCollectionOfObjectValues<MessageRule>(createMessageRuleFromDiscriminatorValue); },
        "messages": n => { mailFolder.messages = n.getCollectionOfObjectValues<Message>(createMessageFromDiscriminatorValue); },
        "multiValueExtendedProperties": n => { mailFolder.multiValueExtendedProperties = n.getCollectionOfObjectValues<MultiValueLegacyExtendedProperty>(createMultiValueLegacyExtendedPropertyFromDiscriminatorValue); },
        "parentFolderId": n => { mailFolder.parentFolderId = n.getStringValue(); },
        "singleValueExtendedProperties": n => { mailFolder.singleValueExtendedProperties = n.getCollectionOfObjectValues<SingleValueLegacyExtendedProperty>(createSingleValueLegacyExtendedPropertyFromDiscriminatorValue); },
        "totalItemCount": n => { mailFolder.totalItemCount = n.getNumberValue(); },
        "unreadItemCount": n => { mailFolder.unreadItemCount = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param MailFolderCollectionResponse The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoMailFolderCollectionResponse(mailFolderCollectionResponse: Partial<MailFolderCollectionResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(mailFolderCollectionResponse),
        "value": n => { mailFolderCollectionResponse.value = n.getCollectionOfObjectValues<MailFolder>(createMailFolderFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @param MailSearchFolder The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoMailSearchFolder(mailSearchFolder: Partial<MailSearchFolder> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoMailFolder(mailSearchFolder),
        "filterQuery": n => { mailSearchFolder.filterQuery = n.getStringValue(); },
        "includeNestedFolders": n => { mailSearchFolder.includeNestedFolders = n.getBooleanValue(); },
        "isSupported": n => { mailSearchFolder.isSupported = n.getBooleanValue(); },
        "sourceFolderIds": n => { mailSearchFolder.sourceFolderIds = n.getCollectionOfPrimitiveValues<string>(); },
    }
}
/**
 * The deserialization information for the current model
 * @param Message The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoMessage(message: Partial<Message> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoOutlookItem(message),
        "attachments": n => { message.attachments = n.getCollectionOfObjectValues<Attachment>(createAttachmentFromDiscriminatorValue); },
        "bccRecipients": n => { message.bccRecipients = n.getCollectionOfObjectValues<Recipient>(createRecipientFromDiscriminatorValue); },
        "body": n => { message.body = n.getObjectValue<ItemBody>(createItemBodyFromDiscriminatorValue); },
        "bodyPreview": n => { message.bodyPreview = n.getStringValue(); },
        "ccRecipients": n => { message.ccRecipients = n.getCollectionOfObjectValues<Recipient>(createRecipientFromDiscriminatorValue); },
        "conversationId": n => { message.conversationId = n.getStringValue(); },
        "conversationIndex": n => { message.conversationIndex = n.getByteArrayValue(); },
        "extensions": n => { message.extensions = n.getCollectionOfObjectValues<Extension>(createExtensionFromDiscriminatorValue); },
        "flag": n => { message.flag = n.getObjectValue<FollowupFlag>(createFollowupFlagFromDiscriminatorValue); },
        "from": n => { message.from = n.getObjectValue<Recipient>(createRecipientFromDiscriminatorValue); },
        "hasAttachments": n => { message.hasAttachments = n.getBooleanValue(); },
        "importance": n => { message.importance = n.getEnumValue<Importance>(ImportanceObject); },
        "inferenceClassification": n => { message.inferenceClassification = n.getEnumValue<InferenceClassificationType>(InferenceClassificationTypeObject); },
        "internetMessageHeaders": n => { message.internetMessageHeaders = n.getCollectionOfObjectValues<InternetMessageHeader>(createInternetMessageHeaderFromDiscriminatorValue); },
        "internetMessageId": n => { message.internetMessageId = n.getStringValue(); },
        "isDeliveryReceiptRequested": n => { message.isDeliveryReceiptRequested = n.getBooleanValue(); },
        "isDraft": n => { message.isDraft = n.getBooleanValue(); },
        "isRead": n => { message.isRead = n.getBooleanValue(); },
        "isReadReceiptRequested": n => { message.isReadReceiptRequested = n.getBooleanValue(); },
        "multiValueExtendedProperties": n => { message.multiValueExtendedProperties = n.getCollectionOfObjectValues<MultiValueLegacyExtendedProperty>(createMultiValueLegacyExtendedPropertyFromDiscriminatorValue); },
        "parentFolderId": n => { message.parentFolderId = n.getStringValue(); },
        "receivedDateTime": n => { message.receivedDateTime = n.getDateValue(); },
        "replyTo": n => { message.replyTo = n.getCollectionOfObjectValues<Recipient>(createRecipientFromDiscriminatorValue); },
        "sender": n => { message.sender = n.getObjectValue<Recipient>(createRecipientFromDiscriminatorValue); },
        "sentDateTime": n => { message.sentDateTime = n.getDateValue(); },
        "singleValueExtendedProperties": n => { message.singleValueExtendedProperties = n.getCollectionOfObjectValues<SingleValueLegacyExtendedProperty>(createSingleValueLegacyExtendedPropertyFromDiscriminatorValue); },
        "subject": n => { message.subject = n.getStringValue(); },
        "toRecipients": n => { message.toRecipients = n.getCollectionOfObjectValues<Recipient>(createRecipientFromDiscriminatorValue); },
        "uniqueBody": n => { message.uniqueBody = n.getObjectValue<ItemBody>(createItemBodyFromDiscriminatorValue); },
        "webLink": n => { message.webLink = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param MessageCollectionResponse The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoMessageCollectionResponse(messageCollectionResponse: Partial<MessageCollectionResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(messageCollectionResponse),
        "value": n => { messageCollectionResponse.value = n.getCollectionOfObjectValues<Message>(createMessageFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @param MessageRule The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoMessageRule(messageRule: Partial<MessageRule> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(messageRule),
        "actions": n => { messageRule.actions = n.getObjectValue<MessageRuleActions>(createMessageRuleActionsFromDiscriminatorValue); },
        "conditions": n => { messageRule.conditions = n.getObjectValue<MessageRulePredicates>(createMessageRulePredicatesFromDiscriminatorValue); },
        "displayName": n => { messageRule.displayName = n.getStringValue(); },
        "exceptions": n => { messageRule.exceptions = n.getObjectValue<MessageRulePredicates>(createMessageRulePredicatesFromDiscriminatorValue); },
        "hasError": n => { messageRule.hasError = n.getBooleanValue(); },
        "isEnabled": n => { messageRule.isEnabled = n.getBooleanValue(); },
        "isReadOnly": n => { messageRule.isReadOnly = n.getBooleanValue(); },
        "sequence": n => { messageRule.sequence = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param MessageRuleActions The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoMessageRuleActions(messageRuleActions: Partial<MessageRuleActions> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "assignCategories": n => { messageRuleActions.assignCategories = n.getCollectionOfPrimitiveValues<string>(); },
        "copyToFolder": n => { messageRuleActions.copyToFolder = n.getStringValue(); },
        "delete": n => { messageRuleActions.delete = n.getBooleanValue(); },
        "forwardAsAttachmentTo": n => { messageRuleActions.forwardAsAttachmentTo = n.getCollectionOfObjectValues<Recipient>(createRecipientFromDiscriminatorValue); },
        "forwardTo": n => { messageRuleActions.forwardTo = n.getCollectionOfObjectValues<Recipient>(createRecipientFromDiscriminatorValue); },
        "markAsRead": n => { messageRuleActions.markAsRead = n.getBooleanValue(); },
        "markImportance": n => { messageRuleActions.markImportance = n.getEnumValue<Importance>(ImportanceObject); },
        "moveToFolder": n => { messageRuleActions.moveToFolder = n.getStringValue(); },
        "@odata.type": n => { messageRuleActions.odataType = n.getStringValue(); },
        "permanentDelete": n => { messageRuleActions.permanentDelete = n.getBooleanValue(); },
        "redirectTo": n => { messageRuleActions.redirectTo = n.getCollectionOfObjectValues<Recipient>(createRecipientFromDiscriminatorValue); },
        "stopProcessingRules": n => { messageRuleActions.stopProcessingRules = n.getBooleanValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param MessageRuleCollectionResponse The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoMessageRuleCollectionResponse(messageRuleCollectionResponse: Partial<MessageRuleCollectionResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(messageRuleCollectionResponse),
        "value": n => { messageRuleCollectionResponse.value = n.getCollectionOfObjectValues<MessageRule>(createMessageRuleFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @param MessageRulePredicates The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoMessageRulePredicates(messageRulePredicates: Partial<MessageRulePredicates> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "bodyContains": n => { messageRulePredicates.bodyContains = n.getCollectionOfPrimitiveValues<string>(); },
        "bodyOrSubjectContains": n => { messageRulePredicates.bodyOrSubjectContains = n.getCollectionOfPrimitiveValues<string>(); },
        "categories": n => { messageRulePredicates.categories = n.getCollectionOfPrimitiveValues<string>(); },
        "fromAddresses": n => { messageRulePredicates.fromAddresses = n.getCollectionOfObjectValues<Recipient>(createRecipientFromDiscriminatorValue); },
        "hasAttachments": n => { messageRulePredicates.hasAttachments = n.getBooleanValue(); },
        "headerContains": n => { messageRulePredicates.headerContains = n.getCollectionOfPrimitiveValues<string>(); },
        "importance": n => { messageRulePredicates.importance = n.getEnumValue<Importance>(ImportanceObject); },
        "isApprovalRequest": n => { messageRulePredicates.isApprovalRequest = n.getBooleanValue(); },
        "isAutomaticForward": n => { messageRulePredicates.isAutomaticForward = n.getBooleanValue(); },
        "isAutomaticReply": n => { messageRulePredicates.isAutomaticReply = n.getBooleanValue(); },
        "isEncrypted": n => { messageRulePredicates.isEncrypted = n.getBooleanValue(); },
        "isMeetingRequest": n => { messageRulePredicates.isMeetingRequest = n.getBooleanValue(); },
        "isMeetingResponse": n => { messageRulePredicates.isMeetingResponse = n.getBooleanValue(); },
        "isNonDeliveryReport": n => { messageRulePredicates.isNonDeliveryReport = n.getBooleanValue(); },
        "isPermissionControlled": n => { messageRulePredicates.isPermissionControlled = n.getBooleanValue(); },
        "isReadReceipt": n => { messageRulePredicates.isReadReceipt = n.getBooleanValue(); },
        "isSigned": n => { messageRulePredicates.isSigned = n.getBooleanValue(); },
        "isVoicemail": n => { messageRulePredicates.isVoicemail = n.getBooleanValue(); },
        "messageActionFlag": n => { messageRulePredicates.messageActionFlag = n.getEnumValue<MessageActionFlag>(MessageActionFlagObject); },
        "notSentToMe": n => { messageRulePredicates.notSentToMe = n.getBooleanValue(); },
        "@odata.type": n => { messageRulePredicates.odataType = n.getStringValue(); },
        "recipientContains": n => { messageRulePredicates.recipientContains = n.getCollectionOfPrimitiveValues<string>(); },
        "senderContains": n => { messageRulePredicates.senderContains = n.getCollectionOfPrimitiveValues<string>(); },
        "sensitivity": n => { messageRulePredicates.sensitivity = n.getEnumValue<Sensitivity>(SensitivityObject); },
        "sentCcMe": n => { messageRulePredicates.sentCcMe = n.getBooleanValue(); },
        "sentOnlyToMe": n => { messageRulePredicates.sentOnlyToMe = n.getBooleanValue(); },
        "sentToAddresses": n => { messageRulePredicates.sentToAddresses = n.getCollectionOfObjectValues<Recipient>(createRecipientFromDiscriminatorValue); },
        "sentToMe": n => { messageRulePredicates.sentToMe = n.getBooleanValue(); },
        "sentToOrCcMe": n => { messageRulePredicates.sentToOrCcMe = n.getBooleanValue(); },
        "subjectContains": n => { messageRulePredicates.subjectContains = n.getCollectionOfPrimitiveValues<string>(); },
        "withinSizeRange": n => { messageRulePredicates.withinSizeRange = n.getObjectValue<SizeRange>(createSizeRangeFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @param MultiValueLegacyExtendedProperty The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoMultiValueLegacyExtendedProperty(multiValueLegacyExtendedProperty: Partial<MultiValueLegacyExtendedProperty> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(multiValueLegacyExtendedProperty),
        "value": n => { multiValueLegacyExtendedProperty.value = n.getCollectionOfPrimitiveValues<string>(); },
    }
}
/**
 * The deserialization information for the current model
 * @param OnlineMeetingInfo The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoOnlineMeetingInfo(onlineMeetingInfo: Partial<OnlineMeetingInfo> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "conferenceId": n => { onlineMeetingInfo.conferenceId = n.getStringValue(); },
        "joinUrl": n => { onlineMeetingInfo.joinUrl = n.getStringValue(); },
        "@odata.type": n => { onlineMeetingInfo.odataType = n.getStringValue(); },
        "phones": n => { onlineMeetingInfo.phones = n.getCollectionOfObjectValues<Phone>(createPhoneFromDiscriminatorValue); },
        "quickDial": n => { onlineMeetingInfo.quickDial = n.getStringValue(); },
        "tollFreeNumbers": n => { onlineMeetingInfo.tollFreeNumbers = n.getCollectionOfPrimitiveValues<string>(); },
        "tollNumber": n => { onlineMeetingInfo.tollNumber = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param OpenTypeExtension The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoOpenTypeExtension(openTypeExtension: Partial<OpenTypeExtension> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoExtension(openTypeExtension),
        "extensionName": n => { openTypeExtension.extensionName = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param OutlookGeoCoordinates The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoOutlookGeoCoordinates(outlookGeoCoordinates: Partial<OutlookGeoCoordinates> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "accuracy": n => { outlookGeoCoordinates.accuracy = n.getNumberValue(); },
        "altitude": n => { outlookGeoCoordinates.altitude = n.getNumberValue(); },
        "altitudeAccuracy": n => { outlookGeoCoordinates.altitudeAccuracy = n.getNumberValue(); },
        "latitude": n => { outlookGeoCoordinates.latitude = n.getNumberValue(); },
        "longitude": n => { outlookGeoCoordinates.longitude = n.getNumberValue(); },
        "@odata.type": n => { outlookGeoCoordinates.odataType = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param OutlookItem The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoOutlookItem(outlookItem: Partial<OutlookItem> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(outlookItem),
        "categories": n => { outlookItem.categories = n.getCollectionOfPrimitiveValues<string>(); },
        "changeKey": n => { outlookItem.changeKey = n.getStringValue(); },
        "createdDateTime": n => { outlookItem.createdDateTime = n.getDateValue(); },
        "lastModifiedDateTime": n => { outlookItem.lastModifiedDateTime = n.getDateValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param PatternedRecurrence The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoPatternedRecurrence(patternedRecurrence: Partial<PatternedRecurrence> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "@odata.type": n => { patternedRecurrence.odataType = n.getStringValue(); },
        "pattern": n => { patternedRecurrence.pattern = n.getObjectValue<RecurrencePattern>(createRecurrencePatternFromDiscriminatorValue); },
        "range": n => { patternedRecurrence.range = n.getObjectValue<RecurrenceRange>(createRecurrenceRangeFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @param Phone The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoPhone(phone: Partial<Phone> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "language": n => { phone.language = n.getStringValue(); },
        "number": n => { phone.number = n.getStringValue(); },
        "@odata.type": n => { phone.odataType = n.getStringValue(); },
        "region": n => { phone.region = n.getStringValue(); },
        "type": n => { phone.type = n.getEnumValue<PhoneType>(PhoneTypeObject); },
    }
}
/**
 * The deserialization information for the current model
 * @param PhysicalAddress The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoPhysicalAddress(physicalAddress: Partial<PhysicalAddress> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "city": n => { physicalAddress.city = n.getStringValue(); },
        "countryOrRegion": n => { physicalAddress.countryOrRegion = n.getStringValue(); },
        "@odata.type": n => { physicalAddress.odataType = n.getStringValue(); },
        "postalCode": n => { physicalAddress.postalCode = n.getStringValue(); },
        "state": n => { physicalAddress.state = n.getStringValue(); },
        "street": n => { physicalAddress.street = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param Post The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoPost(post: Partial<Post> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoOutlookItem(post),
        "attachments": n => { post.attachments = n.getCollectionOfObjectValues<Attachment>(createAttachmentFromDiscriminatorValue); },
        "body": n => { post.body = n.getObjectValue<ItemBody>(createItemBodyFromDiscriminatorValue); },
        "conversationId": n => { post.conversationId = n.getStringValue(); },
        "conversationThreadId": n => { post.conversationThreadId = n.getStringValue(); },
        "extensions": n => { post.extensions = n.getCollectionOfObjectValues<Extension>(createExtensionFromDiscriminatorValue); },
        "from": n => { post.from = n.getObjectValue<Recipient>(createRecipientFromDiscriminatorValue); },
        "hasAttachments": n => { post.hasAttachments = n.getBooleanValue(); },
        "inReplyTo": n => { post.inReplyTo = n.getObjectValue<Post>(createPostFromDiscriminatorValue); },
        "multiValueExtendedProperties": n => { post.multiValueExtendedProperties = n.getCollectionOfObjectValues<MultiValueLegacyExtendedProperty>(createMultiValueLegacyExtendedPropertyFromDiscriminatorValue); },
        "newParticipants": n => { post.newParticipants = n.getCollectionOfObjectValues<Recipient>(createRecipientFromDiscriminatorValue); },
        "receivedDateTime": n => { post.receivedDateTime = n.getDateValue(); },
        "sender": n => { post.sender = n.getObjectValue<Recipient>(createRecipientFromDiscriminatorValue); },
        "singleValueExtendedProperties": n => { post.singleValueExtendedProperties = n.getCollectionOfObjectValues<SingleValueLegacyExtendedProperty>(createSingleValueLegacyExtendedPropertyFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @param ProfilePhoto The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoProfilePhoto(profilePhoto: Partial<ProfilePhoto> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(profilePhoto),
        "height": n => { profilePhoto.height = n.getNumberValue(); },
        "width": n => { profilePhoto.width = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param Recipient The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoRecipient(recipient: Partial<Recipient> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "emailAddress": n => { recipient.emailAddress = n.getObjectValue<EmailAddress>(createEmailAddressFromDiscriminatorValue); },
        "@odata.type": n => { recipient.odataType = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param RecurrencePattern The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoRecurrencePattern(recurrencePattern: Partial<RecurrencePattern> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "dayOfMonth": n => { recurrencePattern.dayOfMonth = n.getNumberValue(); },
        "daysOfWeek": n => { recurrencePattern.daysOfWeek = n.getCollectionOfEnumValues<DayOfWeek>(DayOfWeekObject); },
        "firstDayOfWeek": n => { recurrencePattern.firstDayOfWeek = n.getEnumValue<DayOfWeek>(DayOfWeekObject); },
        "index": n => { recurrencePattern.index = n.getEnumValue<WeekIndex>(WeekIndexObject); },
        "interval": n => { recurrencePattern.interval = n.getNumberValue(); },
        "month": n => { recurrencePattern.month = n.getNumberValue(); },
        "@odata.type": n => { recurrencePattern.odataType = n.getStringValue(); },
        "type": n => { recurrencePattern.type = n.getEnumValue<RecurrencePatternType>(RecurrencePatternTypeObject); },
    }
}
/**
 * The deserialization information for the current model
 * @param RecurrenceRange The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoRecurrenceRange(recurrenceRange: Partial<RecurrenceRange> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "endDate": n => { recurrenceRange.endDate = n.getDateOnlyValue(); },
        "numberOfOccurrences": n => { recurrenceRange.numberOfOccurrences = n.getNumberValue(); },
        "@odata.type": n => { recurrenceRange.odataType = n.getStringValue(); },
        "recurrenceTimeZone": n => { recurrenceRange.recurrenceTimeZone = n.getStringValue(); },
        "startDate": n => { recurrenceRange.startDate = n.getDateOnlyValue(); },
        "type": n => { recurrenceRange.type = n.getEnumValue<RecurrenceRangeType>(RecurrenceRangeTypeObject); },
    }
}
/**
 * The deserialization information for the current model
 * @param ReferenceAttachment The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoReferenceAttachment(referenceAttachment: Partial<ReferenceAttachment> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoAttachment(referenceAttachment),
    }
}
/**
 * The deserialization information for the current model
 * @param ResponseStatus The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoResponseStatus(responseStatus: Partial<ResponseStatus> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "@odata.type": n => { responseStatus.odataType = n.getStringValue(); },
        "response": n => { responseStatus.response = n.getEnumValue<ResponseType>(ResponseTypeObject); },
        "time": n => { responseStatus.time = n.getDateValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param SingleValueLegacyExtendedProperty The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoSingleValueLegacyExtendedProperty(singleValueLegacyExtendedProperty: Partial<SingleValueLegacyExtendedProperty> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(singleValueLegacyExtendedProperty),
        "value": n => { singleValueLegacyExtendedProperty.value = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param SizeRange The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoSizeRange(sizeRange: Partial<SizeRange> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "maximumSize": n => { sizeRange.maximumSize = n.getNumberValue(); },
        "minimumSize": n => { sizeRange.minimumSize = n.getNumberValue(); },
        "@odata.type": n => { sizeRange.odataType = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param TimeSlot The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoTimeSlot(timeSlot: Partial<TimeSlot> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "end": n => { timeSlot.end = n.getObjectValue<DateTimeTimeZone>(createDateTimeTimeZoneFromDiscriminatorValue); },
        "@odata.type": n => { timeSlot.odataType = n.getStringValue(); },
        "start": n => { timeSlot.start = n.getObjectValue<DateTimeTimeZone>(createDateTimeTimeZoneFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @param UploadSession The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoUploadSession(uploadSession: Partial<UploadSession> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "expirationDateTime": n => { uploadSession.expirationDateTime = n.getDateValue(); },
        "nextExpectedRanges": n => { uploadSession.nextExpectedRanges = n.getCollectionOfPrimitiveValues<string>(); },
        "@odata.type": n => { uploadSession.odataType = n.getStringValue(); },
        "uploadUrl": n => { uploadSession.uploadUrl = n.getStringValue(); },
    }
}
export interface EmailAddress extends AdditionalDataHolder, Parsable {
    /**
     * The email address of the person or entity.
     */
    address?: string | null;
    /**
     * The display name of the person or entity.
     */
    name?: string | null;
    /**
     * The OdataType property
     */
    odataType?: string | null;
}
export interface Entity extends AdditionalDataHolder, Parsable {
    /**
     * The unique identifier for an entity. Read-only.
     */
    id?: string | null;
    /**
     * The OdataType property
     */
    odataType?: string | null;
}
export interface Event extends OutlookItem, Parsable {
    /**
     * true if the meeting organizer allows invitees to propose a new time when responding; otherwise, false. Optional. The default is true.
     */
    allowNewTimeProposals?: boolean | null;
    /**
     * The collection of FileAttachment, ItemAttachment, and referenceAttachment attachments for the event. Navigation property. Read-only. Nullable.
     */
    attachments?: Attachment[] | null;
    /**
     * The collection of attendees for the event.
     */
    attendees?: Attendee[] | null;
    /**
     * The body of the message associated with the event. It can be in HTML or text format.
     */
    body?: ItemBody | null;
    /**
     * The preview of the message associated with the event. It's in text format.
     */
    bodyPreview?: string | null;
    /**
     * The calendar that contains the event. Navigation property. Read-only.
     */
    calendar?: Calendar | null;
    /**
     * Contains occurrenceId property values of canceled instances in a recurring series, if the event is the series master. Instances in a recurring series that are canceled are called canceled occurences.Returned only on $select in a Get operation which specifies the ID (seriesMasterId property value) of a series master event.
     */
    cancelledOccurrences?: string[] | null;
    /**
     * The date, time, and time zone that the event ends. By default, the end time is in UTC.
     */
    end?: DateTimeTimeZone | null;
    /**
     * Contains the id property values of the event instances that are exceptions in a recurring series.Exceptions can differ from other occurrences in a recurring series, such as the subject, start or end times, or attendees. Exceptions don't include canceled occurrences.Returned only on $select and $expand in a GET operation that specifies the ID (seriesMasterId property value) of a series master event.
     */
    exceptionOccurrences?: Event[] | null;
    /**
     * The collection of open extensions defined for the event. Nullable.
     */
    extensions?: Extension[] | null;
    /**
     * Set to true if the event has attachments.
     */
    hasAttachments?: boolean | null;
    /**
     * When set to true, each attendee only sees themselves in the meeting request and meeting Tracking list. The default is false.
     */
    hideAttendees?: boolean | null;
    /**
     * A unique identifier for an event across calendars. This ID is different for each occurrence in a recurring series. Read-only.
     */
    iCalUId?: string | null;
    /**
     * The importance of the event. The possible values are: low, normal, high.
     */
    importance?: Importance | null;
    /**
     * The occurrences of a recurring series, if the event is a series master. This property includes occurrences that are part of the recurrence pattern, and exceptions modified, but doesn't include occurrences canceled from the series. Navigation property. Read-only. Nullable.
     */
    instances?: Event[] | null;
    /**
     * Set to true if the event lasts all day. If true, regardless of whether it's a single-day or multi-day event, start, and endtime must be set to midnight and be in the same time zone.
     */
    isAllDay?: boolean | null;
    /**
     * Set to true if the event has been canceled.
     */
    isCancelled?: boolean | null;
    /**
     * Set to true if the user has updated the meeting in Outlook but hasn't sent the updates to attendees. Set to false if all changes are sent, or if the event is an appointment without any attendees.
     */
    isDraft?: boolean | null;
    /**
     * True if this event has online meeting information (that is, onlineMeeting points to an onlineMeetingInfo resource), false otherwise. Default is false (onlineMeeting is null). Optional.  After you set isOnlineMeeting to true, Microsoft Graph initializes onlineMeeting. Subsequently, Outlook ignores any further changes to isOnlineMeeting, and the meeting remains available online.
     */
    isOnlineMeeting?: boolean | null;
    /**
     * Set to true if the calendar owner (specified by the owner property of the calendar) is the organizer of the event (specified by the organizer property of the event). It also applies if a delegate organized the event on behalf of the owner.
     */
    isOrganizer?: boolean | null;
    /**
     * Set to true if an alert is set to remind the user of the event.
     */
    isReminderOn?: boolean | null;
    /**
     * The location of the event.
     */
    location?: Location | null;
    /**
     * The locations where the event is held or attended from. The location and locations properties always correspond with each other. If you update the location property, any prior locations in the locations collection are removed and replaced by the new location value.
     */
    locations?: Location[] | null;
    /**
     * The collection of multi-value extended properties defined for the event. Read-only. Nullable.
     */
    multiValueExtendedProperties?: MultiValueLegacyExtendedProperty[] | null;
    /**
     * Details for an attendee to join the meeting online. The default is null. Read-only. After you set the isOnlineMeeting and onlineMeetingProvider properties to enable a meeting online, Microsoft Graph initializes onlineMeeting. When set, the meeting remains available online, and you can't change the isOnlineMeeting, onlineMeetingProvider, and onlneMeeting properties again.
     */
    onlineMeeting?: OnlineMeetingInfo | null;
    /**
     * Represents the online meeting service provider. By default, onlineMeetingProvider is unknown. The possible values are unknown, teamsForBusiness, skypeForBusiness, and skypeForConsumer. Optional.  After you set onlineMeetingProvider, Microsoft Graph initializes onlineMeeting. Subsequently, you can't change onlineMeetingProvider again, and the meeting remains available online.
     */
    onlineMeetingProvider?: OnlineMeetingProviderType | null;
    /**
     * A URL for an online meeting. The property is set only when an organizer specifies in Outlook that an event is an online meeting such as Skype. Read-only.To access the URL to join an online meeting, use joinUrl which is exposed via the onlineMeeting property of the event. The onlineMeetingUrl property will be deprecated in the future.
     */
    onlineMeetingUrl?: string | null;
    /**
     * The organizer of the event.
     */
    organizer?: Recipient | null;
    /**
     * The end time zone that was set when the event was created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in desktop Outlook.
     */
    originalEndTimeZone?: string | null;
    /**
     * Represents the start time of an event when it's initially created as an occurrence or exception in a recurring series. This property is not returned for events that are single instances. Its date and time information is expressed in ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
     */
    originalStart?: Date | null;
    /**
     * The start time zone that was set when the event was created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in desktop Outlook.
     */
    originalStartTimeZone?: string | null;
    /**
     * The recurrence pattern for the event.
     */
    recurrence?: PatternedRecurrence | null;
    /**
     * The number of minutes before the event start time that the reminder alert occurs.
     */
    reminderMinutesBeforeStart?: number | null;
    /**
     * Default is true, which represents the organizer would like an invitee to send a response to the event.
     */
    responseRequested?: boolean | null;
    /**
     * Indicates the type of response sent in response to an event message.
     */
    responseStatus?: ResponseStatus | null;
    /**
     * Possible values are: normal, personal, private, and confidential.
     */
    sensitivity?: Sensitivity | null;
    /**
     * The ID for the recurring series master item, if this event is part of a recurring series.
     */
    seriesMasterId?: string | null;
    /**
     * The status to show. Possible values are: free, tentative, busy, oof, workingElsewhere, unknown.
     */
    showAs?: FreeBusyStatus | null;
    /**
     * The collection of single-value extended properties defined for the event. Read-only. Nullable.
     */
    singleValueExtendedProperties?: SingleValueLegacyExtendedProperty[] | null;
    /**
     * The start date, time, and time zone of the event. By default, the start time is in UTC.
     */
    start?: DateTimeTimeZone | null;
    /**
     * The text of the event's subject line.
     */
    subject?: string | null;
    /**
     * A custom identifier specified by a client app for the server to avoid redundant POST operations in case of client retries to create the same event. It's useful when low network connectivity causes the client to time out before receiving a response from the server for the client's prior create-event request. After you set transactionId when creating an event, you can't change transactionId in a subsequent update. This property is only returned in a response payload if an app has set it. Optional.
     */
    transactionId?: string | null;
    /**
     * The event type. Possible values are: singleInstance, occurrence, exception, seriesMaster. Read-only
     */
    type?: EventType | null;
    /**
     * The URL to open the event in Outlook on the web.Outlook on the web opens the event in the browser if you are signed in to your mailbox. Otherwise, Outlook on the web prompts you to sign in.This URL can't be accessed from within an iFrame.
     */
    webLink?: string | null;
}
export interface EventCollectionResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: Event[] | null;
}
export interface EventMessage extends Message, Parsable {
    /**
     * The endDateTime property
     */
    endDateTime?: DateTimeTimeZone | null;
    /**
     * The event associated with the event message. The assumption for attendees or room resources is that the Calendar Attendant is set to automatically update the calendar with an event when meeting request event messages arrive. Navigation property. Read-only.
     */
    event?: Event | null;
    /**
     * The isAllDay property
     */
    isAllDay?: boolean | null;
    /**
     * True if this meeting request is accessible to a delegate, false otherwise. The default is false.
     */
    isDelegated?: boolean | null;
    /**
     * The isOutOfDate property
     */
    isOutOfDate?: boolean | null;
    /**
     * The location property
     */
    location?: Location | null;
    /**
     * The type of event message: none, meetingRequest, meetingCancelled, meetingAccepted, meetingTenativelyAccepted, meetingDeclined.
     */
    meetingMessageType?: MeetingMessageType | null;
    /**
     * The recurrence property
     */
    recurrence?: PatternedRecurrence | null;
    /**
     * The startDateTime property
     */
    startDateTime?: DateTimeTimeZone | null;
    /**
     * The type property
     */
    type?: EventType | null;
}
export interface EventMessageRequest extends EventMessage, Parsable {
    /**
     * True if the meeting organizer allows invitees to propose a new time when responding, false otherwise. Optional. Default is true.
     */
    allowNewTimeProposals?: boolean | null;
    /**
     * The meetingRequestType property
     */
    meetingRequestType?: MeetingRequestType | null;
    /**
     * If the meeting update changes the meeting end time, this property specifies the previous meeting end time.
     */
    previousEndDateTime?: DateTimeTimeZone | null;
    /**
     * If the meeting update changes the meeting location, this property specifies the previous meeting location.
     */
    previousLocation?: Location | null;
    /**
     * If the meeting update changes the meeting start time, this property specifies the previous meeting start time.
     */
    previousStartDateTime?: DateTimeTimeZone | null;
    /**
     * Set to true if the sender would like the invitee to send a response to the requested meeting.
     */
    responseRequested?: boolean | null;
}
export interface EventMessageResponse extends EventMessage, Parsable {
    /**
     * An alternate date/time proposed by an invitee for a meeting request to start and end. Read-only. Not filterable.
     */
    proposedNewTime?: TimeSlot | null;
    /**
     * Specifies the type of response to a meeting request. Possible values are: tentativelyAccepted, accepted, declined. For the eventMessageResponse type, none, organizer, and notResponded are not supported. Read-only. Not filterable.
     */
    responseType?: ResponseType | null;
}
export type EventType = (typeof EventTypeObject)[keyof typeof EventTypeObject];
export interface Extension extends Entity, Parsable {
}
export interface ExtensionCollectionResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: Extension[] | null;
}
export interface FileAttachment extends Attachment, Parsable {
    /**
     * The base64-encoded contents of the file.
     */
    contentBytes?: ArrayBuffer | null;
    /**
     * The ID of the attachment in the Exchange store.
     */
    contentId?: string | null;
    /**
     * Don't use this property as it isn't supported.
     */
    contentLocation?: string | null;
}
export interface FollowupFlag extends AdditionalDataHolder, Parsable {
    /**
     * The date and time that the follow-up was finished.
     */
    completedDateTime?: DateTimeTimeZone | null;
    /**
     * The date and time that the follow-up is to be finished. Note: To set the due date, you must also specify the startDateTime; otherwise, you get a 400 Bad Request response.
     */
    dueDateTime?: DateTimeTimeZone | null;
    /**
     * The status for follow-up for an item. Possible values are notFlagged, complete, and flagged.
     */
    flagStatus?: FollowupFlagStatus | null;
    /**
     * The OdataType property
     */
    odataType?: string | null;
    /**
     * The date and time that the follow-up is to begin.
     */
    startDateTime?: DateTimeTimeZone | null;
}
export type FollowupFlagStatus = (typeof FollowupFlagStatusObject)[keyof typeof FollowupFlagStatusObject];
export type FreeBusyStatus = (typeof FreeBusyStatusObject)[keyof typeof FreeBusyStatusObject];
export type Importance = (typeof ImportanceObject)[keyof typeof ImportanceObject];
export type InferenceClassificationType = (typeof InferenceClassificationTypeObject)[keyof typeof InferenceClassificationTypeObject];
export interface InternetMessageHeader extends AdditionalDataHolder, Parsable {
    /**
     * Represents the key in a key-value pair.
     */
    name?: string | null;
    /**
     * The OdataType property
     */
    odataType?: string | null;
    /**
     * The value in a key-value pair.
     */
    value?: string | null;
}
export interface ItemAttachment extends Attachment, Parsable {
    /**
     * The attached message or event. Navigation property.
     */
    item?: OutlookItem | null;
}
export interface ItemBody extends AdditionalDataHolder, Parsable {
    /**
     * The content of the item.
     */
    content?: string | null;
    /**
     * The type of the content. Possible values are text and html.
     */
    contentType?: BodyType | null;
    /**
     * The OdataType property
     */
    odataType?: string | null;
}
export interface Location extends AdditionalDataHolder, Parsable {
    /**
     * The street address of the location.
     */
    address?: PhysicalAddress | null;
    /**
     * The geographic coordinates and elevation of the location.
     */
    coordinates?: OutlookGeoCoordinates | null;
    /**
     * The name associated with the location.
     */
    displayName?: string | null;
    /**
     * Optional email address of the location.
     */
    locationEmailAddress?: string | null;
    /**
     * The type of location. The possible values are: default, conferenceRoom, homeAddress, businessAddress,geoCoordinates, streetAddress, hotel, restaurant, localBusiness, postalAddress. Read-only.
     */
    locationType?: LocationType | null;
    /**
     * Optional URI representing the location.
     */
    locationUri?: string | null;
    /**
     * The OdataType property
     */
    odataType?: string | null;
    /**
     * For internal use only.
     */
    uniqueId?: string | null;
    /**
     * For internal use only.
     */
    uniqueIdType?: LocationUniqueIdType | null;
}
export interface LocationConstraintItem extends Location, Parsable {
    /**
     * If set to true and the specified resource is busy, findMeetingTimes looks for another resource that is free. If set to false and the specified resource is busy, findMeetingTimes returns the resource best ranked in the user's cache without checking if it's free. Default is true.
     */
    resolveAvailability?: boolean | null;
}
export type LocationType = (typeof LocationTypeObject)[keyof typeof LocationTypeObject];
export type LocationUniqueIdType = (typeof LocationUniqueIdTypeObject)[keyof typeof LocationUniqueIdTypeObject];
export interface MailFolder extends Entity, Parsable {
    /**
     * The number of immediate child mailFolders in the current mailFolder.
     */
    childFolderCount?: number | null;
    /**
     * The collection of child folders in the mailFolder.
     */
    childFolders?: MailFolder[] | null;
    /**
     * The mailFolder's display name.
     */
    displayName?: string | null;
    /**
     * Indicates whether the mailFolder is hidden. This property can be set only when creating the folder. Find more information in Hidden mail folders.
     */
    isHidden?: boolean | null;
    /**
     * The collection of rules that apply to the user's Inbox folder.
     */
    messageRules?: MessageRule[] | null;
    /**
     * The collection of messages in the mailFolder.
     */
    messages?: Message[] | null;
    /**
     * The collection of multi-value extended properties defined for the mailFolder. Read-only. Nullable.
     */
    multiValueExtendedProperties?: MultiValueLegacyExtendedProperty[] | null;
    /**
     * The unique identifier for the mailFolder's parent mailFolder.
     */
    parentFolderId?: string | null;
    /**
     * The collection of single-value extended properties defined for the mailFolder. Read-only. Nullable.
     */
    singleValueExtendedProperties?: SingleValueLegacyExtendedProperty[] | null;
    /**
     * The number of items in the mailFolder.
     */
    totalItemCount?: number | null;
    /**
     * The number of items in the mailFolder marked as unread.
     */
    unreadItemCount?: number | null;
}
export interface MailFolderCollectionResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: MailFolder[] | null;
}
export interface MailSearchFolder extends MailFolder, Parsable {
    /**
     * The OData query to filter the messages.
     */
    filterQuery?: string | null;
    /**
     * Indicates how the mailbox folder hierarchy should be traversed in the search. true means that a deep search should be done to include child folders in the hierarchy of each folder explicitly specified in sourceFolderIds. false means a shallow search of only each of the folders explicitly specified in sourceFolderIds.
     */
    includeNestedFolders?: boolean | null;
    /**
     * Indicates whether a search folder is editable using REST APIs.
     */
    isSupported?: boolean | null;
    /**
     * The mailbox folders that should be mined.
     */
    sourceFolderIds?: string[] | null;
}
export type MeetingMessageType = (typeof MeetingMessageTypeObject)[keyof typeof MeetingMessageTypeObject];
export type MeetingRequestType = (typeof MeetingRequestTypeObject)[keyof typeof MeetingRequestTypeObject];
export interface Message extends OutlookItem, Parsable {
    /**
     * The fileAttachment and itemAttachment attachments for the message.
     */
    attachments?: Attachment[] | null;
    /**
     * The Bcc: recipients for the message.
     */
    bccRecipients?: Recipient[] | null;
    /**
     * The body of the message. It can be in HTML or text format. Find out about safe HTML in a message body.
     */
    body?: ItemBody | null;
    /**
     * The first 255 characters of the message body. It is in text format.
     */
    bodyPreview?: string | null;
    /**
     * The Cc: recipients for the message.
     */
    ccRecipients?: Recipient[] | null;
    /**
     * The ID of the conversation the email belongs to.
     */
    conversationId?: string | null;
    /**
     * Indicates the position of the message within the conversation.
     */
    conversationIndex?: ArrayBuffer | null;
    /**
     * The collection of open extensions defined for the message. Nullable.
     */
    extensions?: Extension[] | null;
    /**
     * Indicates the status, start date, due date, or completion date for the message.
     */
    flag?: FollowupFlag | null;
    /**
     * The owner of the mailbox from which the message is sent. In most cases, this value is the same as the sender property, except for sharing or delegation scenarios. The value must correspond to the actual mailbox used. Find out more about setting the from and sender properties of a message.
     */
    from?: Recipient | null;
    /**
     * Indicates whether the message has attachments. This property doesn't include inline attachments, so if a message contains only inline attachments, this property is false. To verify the existence of inline attachments, parse the body property to look for a src attribute, such as <IMG src='cid:image001.jpg@01D26CD8.6C05F070'>.
     */
    hasAttachments?: boolean | null;
    /**
     * The importance of the message. The possible values are: low, normal, and high.
     */
    importance?: Importance | null;
    /**
     * The classification of the message for the user, based on inferred relevance or importance, or on an explicit override. The possible values are: focused or other.
     */
    inferenceClassification?: InferenceClassificationType | null;
    /**
     * A collection of message headers defined by RFC5322. The set includes message headers indicating the network path taken by a message from the sender to the recipient. It can also contain custom message headers that hold app data for the message.  Returned only on applying a $select query option. Read-only.
     */
    internetMessageHeaders?: InternetMessageHeader[] | null;
    /**
     * The message ID in the format specified by RFC2822.
     */
    internetMessageId?: string | null;
    /**
     * Indicates whether a read receipt is requested for the message.
     */
    isDeliveryReceiptRequested?: boolean | null;
    /**
     * Indicates whether the message is a draft. A message is a draft if it hasn't been sent yet.
     */
    isDraft?: boolean | null;
    /**
     * Indicates whether the message has been read.
     */
    isRead?: boolean | null;
    /**
     * Indicates whether a read receipt is requested for the message.
     */
    isReadReceiptRequested?: boolean | null;
    /**
     * The collection of multi-value extended properties defined for the message. Nullable.
     */
    multiValueExtendedProperties?: MultiValueLegacyExtendedProperty[] | null;
    /**
     * The unique identifier for the message's parent mailFolder.
     */
    parentFolderId?: string | null;
    /**
     * The date and time the message was received.  The date and time information uses ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
     */
    receivedDateTime?: Date | null;
    /**
     * The email addresses to use when replying.
     */
    replyTo?: Recipient[] | null;
    /**
     * The account that is used to generate the message. In most cases, this value is the same as the from property. You can set this property to a different value when sending a message from a shared mailbox, for a shared calendar, or as a delegate. In any case, the value must correspond to the actual mailbox used. Find out more about setting the from and sender properties of a message.
     */
    sender?: Recipient | null;
    /**
     * The date and time the message was sent.  The date and time information uses ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
     */
    sentDateTime?: Date | null;
    /**
     * The collection of single-value extended properties defined for the message. Nullable.
     */
    singleValueExtendedProperties?: SingleValueLegacyExtendedProperty[] | null;
    /**
     * The subject of the message.
     */
    subject?: string | null;
    /**
     * The To: recipients for the message.
     */
    toRecipients?: Recipient[] | null;
    /**
     * The part of the body of the message that is unique to the current message. uniqueBody is not returned by default but can be retrieved for a given message by use of the ?$select=uniqueBody query. It can be in HTML or text format.
     */
    uniqueBody?: ItemBody | null;
    /**
     * The URL to open the message in Outlook on the web.You can append an ispopout argument to the end of the URL to change how the message is displayed. If ispopout is not present or if it is set to 1, then the message is shown in a popout window. If ispopout is set to 0, the browser shows the message in the Outlook on the web review pane.The message opens in the browser if you are signed in to your mailbox via Outlook on the web. You are prompted to sign in if you are not already signed in with the browser.This URL cannot be accessed from within an iFrame.
     */
    webLink?: string | null;
}
export type MessageActionFlag = (typeof MessageActionFlagObject)[keyof typeof MessageActionFlagObject];
export interface MessageCollectionResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: Message[] | null;
}
export interface MessageRule extends Entity, Parsable {
    /**
     * Actions to be taken on a message when the corresponding conditions are fulfilled.
     */
    actions?: MessageRuleActions | null;
    /**
     * Conditions that when fulfilled trigger the corresponding actions for that rule.
     */
    conditions?: MessageRulePredicates | null;
    /**
     * The display name of the rule.
     */
    displayName?: string | null;
    /**
     * Exception conditions for the rule.
     */
    exceptions?: MessageRulePredicates | null;
    /**
     * Indicates whether the rule is in an error condition. Read-only.
     */
    hasError?: boolean | null;
    /**
     * Indicates whether the rule is enabled to be applied to messages.
     */
    isEnabled?: boolean | null;
    /**
     * Indicates if the rule is read-only and cannot be modified or deleted by the rules REST API.
     */
    isReadOnly?: boolean | null;
    /**
     * Indicates the order in which the rule is executed, among other rules.
     */
    sequence?: number | null;
}
export interface MessageRuleActions extends AdditionalDataHolder, Parsable {
    /**
     * A list of categories to be assigned to a message.
     */
    assignCategories?: string[] | null;
    /**
     * The ID of a folder that a message is to be copied to.
     */
    copyToFolder?: string | null;
    /**
     * Indicates whether a message should be moved to the Deleted Items folder.
     */
    delete?: boolean | null;
    /**
     * The email addresses of the recipients to which a message should be forwarded as an attachment.
     */
    forwardAsAttachmentTo?: Recipient[] | null;
    /**
     * The email addresses of the recipients to which a message should be forwarded.
     */
    forwardTo?: Recipient[] | null;
    /**
     * Indicates whether a message should be marked as read.
     */
    markAsRead?: boolean | null;
    /**
     * Sets the importance of the message, which can be: low, normal, high.
     */
    markImportance?: Importance | null;
    /**
     * The ID of the folder that a message will be moved to.
     */
    moveToFolder?: string | null;
    /**
     * The OdataType property
     */
    odataType?: string | null;
    /**
     * Indicates whether a message should be permanently deleted and not saved to the Deleted Items folder.
     */
    permanentDelete?: boolean | null;
    /**
     * The email addresses to which a message should be redirected.
     */
    redirectTo?: Recipient[] | null;
    /**
     * Indicates whether subsequent rules should be evaluated.
     */
    stopProcessingRules?: boolean | null;
}
export interface MessageRuleCollectionResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: MessageRule[] | null;
}
export interface MessageRulePredicates extends AdditionalDataHolder, Parsable {
    /**
     * Represents the strings that should appear in the body of an incoming message in order for the condition or exception to apply.
     */
    bodyContains?: string[] | null;
    /**
     * Represents the strings that should appear in the body or subject of an incoming message in order for the condition or exception to apply.
     */
    bodyOrSubjectContains?: string[] | null;
    /**
     * Represents the categories that an incoming message should be labeled with in order for the condition or exception to apply.
     */
    categories?: string[] | null;
    /**
     * Represents the specific sender email addresses of an incoming message in order for the condition or exception to apply.
     */
    fromAddresses?: Recipient[] | null;
    /**
     * Indicates whether an incoming message must have attachments in order for the condition or exception to apply.
     */
    hasAttachments?: boolean | null;
    /**
     * Represents the strings that appear in the headers of an incoming message in order for the condition or exception to apply.
     */
    headerContains?: string[] | null;
    /**
     * The importance that is stamped on an incoming message in order for the condition or exception to apply: low, normal, high.
     */
    importance?: Importance | null;
    /**
     * Indicates whether an incoming message must be an approval request in order for the condition or exception to apply.
     */
    isApprovalRequest?: boolean | null;
    /**
     * Indicates whether an incoming message must be automatically forwarded in order for the condition or exception to apply.
     */
    isAutomaticForward?: boolean | null;
    /**
     * Indicates whether an incoming message must be an auto reply in order for the condition or exception to apply.
     */
    isAutomaticReply?: boolean | null;
    /**
     * Indicates whether an incoming message must be encrypted in order for the condition or exception to apply.
     */
    isEncrypted?: boolean | null;
    /**
     * Indicates whether an incoming message must be a meeting request in order for the condition or exception to apply.
     */
    isMeetingRequest?: boolean | null;
    /**
     * Indicates whether an incoming message must be a meeting response in order for the condition or exception to apply.
     */
    isMeetingResponse?: boolean | null;
    /**
     * Indicates whether an incoming message must be a non-delivery report in order for the condition or exception to apply.
     */
    isNonDeliveryReport?: boolean | null;
    /**
     * Indicates whether an incoming message must be permission controlled (RMS-protected) in order for the condition or exception to apply.
     */
    isPermissionControlled?: boolean | null;
    /**
     * Indicates whether an incoming message must be a read receipt in order for the condition or exception to apply.
     */
    isReadReceipt?: boolean | null;
    /**
     * Indicates whether an incoming message must be S/MIME-signed in order for the condition or exception to apply.
     */
    isSigned?: boolean | null;
    /**
     * Indicates whether an incoming message must be a voice mail in order for the condition or exception to apply.
     */
    isVoicemail?: boolean | null;
    /**
     * Represents the flag-for-action value that appears on an incoming message in order for the condition or exception to apply. The possible values are: any, call, doNotForward, followUp, fyi, forward, noResponseNecessary, read, reply, replyToAll, review.
     */
    messageActionFlag?: MessageActionFlag | null;
    /**
     * Indicates whether the owner of the mailbox must not be a recipient of an incoming message in order for the condition or exception to apply.
     */
    notSentToMe?: boolean | null;
    /**
     * The OdataType property
     */
    odataType?: string | null;
    /**
     * Represents the strings that appear in either the toRecipients or ccRecipients properties of an incoming message in order for the condition or exception to apply.
     */
    recipientContains?: string[] | null;
    /**
     * Represents the strings that appear in the from property of an incoming message in order for the condition or exception to apply.
     */
    senderContains?: string[] | null;
    /**
     * Represents the sensitivity level that must be stamped on an incoming message in order for the condition or exception to apply. The possible values are: normal, personal, private, confidential.
     */
    sensitivity?: Sensitivity | null;
    /**
     * Indicates whether the owner of the mailbox must be in the ccRecipients property of an incoming message in order for the condition or exception to apply.
     */
    sentCcMe?: boolean | null;
    /**
     * Indicates whether the owner of the mailbox must be the only recipient in an incoming message in order for the condition or exception to apply.
     */
    sentOnlyToMe?: boolean | null;
    /**
     * Represents the email addresses that an incoming message must have been sent to in order for the condition or exception to apply.
     */
    sentToAddresses?: Recipient[] | null;
    /**
     * Indicates whether the owner of the mailbox must be in the toRecipients property of an incoming message in order for the condition or exception to apply.
     */
    sentToMe?: boolean | null;
    /**
     * Indicates whether the owner of the mailbox must be in either a toRecipients or ccRecipients property of an incoming message in order for the condition or exception to apply.
     */
    sentToOrCcMe?: boolean | null;
    /**
     * Represents the strings that appear in the subject of an incoming message in order for the condition or exception to apply.
     */
    subjectContains?: string[] | null;
    /**
     * Represents the minimum and maximum sizes (in kilobytes) that an incoming message must fall in between in order for the condition or exception to apply.
     */
    withinSizeRange?: SizeRange | null;
}
export interface MultiValueLegacyExtendedProperty extends Entity, Parsable {
    /**
     * A collection of property values.
     */
    value?: string[] | null;
}
export interface OnlineMeetingInfo extends AdditionalDataHolder, Parsable {
    /**
     * The ID of the conference.
     */
    conferenceId?: string | null;
    /**
     * The external link that launches the online meeting. This is a URL that clients launch into a browser and will redirect the user to join the meeting.
     */
    joinUrl?: string | null;
    /**
     * The OdataType property
     */
    odataType?: string | null;
    /**
     * All of the phone numbers associated with this conference.
     */
    phones?: Phone[] | null;
    /**
     * The preformatted quick dial for this call.
     */
    quickDial?: string | null;
    /**
     * The toll free numbers that can be used to join the conference.
     */
    tollFreeNumbers?: string[] | null;
    /**
     * The toll number that can be used to join the conference.
     */
    tollNumber?: string | null;
}
export type OnlineMeetingProviderType = (typeof OnlineMeetingProviderTypeObject)[keyof typeof OnlineMeetingProviderTypeObject];
export interface OpenTypeExtension extends Extension, Parsable {
    /**
     * A unique text identifier for an open type data extension. Optional.
     */
    extensionName?: string | null;
}
export interface OutlookGeoCoordinates extends AdditionalDataHolder, Parsable {
    /**
     * The accuracy of the latitude and longitude. As an example, the accuracy can be measured in meters, such as the latitude and longitude are accurate to within 50 meters.
     */
    accuracy?: number | null;
    /**
     * The altitude of the location.
     */
    altitude?: number | null;
    /**
     * The accuracy of the altitude.
     */
    altitudeAccuracy?: number | null;
    /**
     * The latitude of the location.
     */
    latitude?: number | null;
    /**
     * The longitude of the location.
     */
    longitude?: number | null;
    /**
     * The OdataType property
     */
    odataType?: string | null;
}
export interface OutlookItem extends Entity, Parsable {
    /**
     * The categories associated with the item
     */
    categories?: string[] | null;
    /**
     * Identifies the version of the item. Every time the item is changed, changeKey changes as well. This allows Exchange to apply changes to the correct version of the object. Read-only.
     */
    changeKey?: string | null;
    /**
     * The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
     */
    createdDateTime?: Date | null;
    /**
     * The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
     */
    lastModifiedDateTime?: Date | null;
}
export interface PatternedRecurrence extends AdditionalDataHolder, Parsable {
    /**
     * The OdataType property
     */
    odataType?: string | null;
    /**
     * The frequency of an event.  For access reviews: Do not specify this property for a one-time access review.  Only interval, dayOfMonth, and type (weekly, absoluteMonthly) properties of recurrencePattern are supported.
     */
    pattern?: RecurrencePattern | null;
    /**
     * The duration of an event.
     */
    range?: RecurrenceRange | null;
}
export interface Phone extends AdditionalDataHolder, Parsable {
    /**
     * The language property
     */
    language?: string | null;
    /**
     * The phone number.
     */
    number?: string | null;
    /**
     * The OdataType property
     */
    odataType?: string | null;
    /**
     * The region property
     */
    region?: string | null;
    /**
     * The type of phone number. The possible values are: home, business, mobile, other, assistant, homeFax, businessFax, otherFax, pager, radio.
     */
    type?: PhoneType | null;
}
export type PhoneType = (typeof PhoneTypeObject)[keyof typeof PhoneTypeObject];
export interface PhysicalAddress extends AdditionalDataHolder, Parsable {
    /**
     * The city.
     */
    city?: string | null;
    /**
     * The country or region. It's a free-format string value, for example, 'United States'.
     */
    countryOrRegion?: string | null;
    /**
     * The OdataType property
     */
    odataType?: string | null;
    /**
     * The postal code.
     */
    postalCode?: string | null;
    /**
     * The state.
     */
    state?: string | null;
    /**
     * The street.
     */
    street?: string | null;
}
export interface Post extends OutlookItem, Parsable {
    /**
     * Read-only. Nullable. Supports $expand.
     */
    attachments?: Attachment[] | null;
    /**
     * The contents of the post. This is a default property. This property can be null.
     */
    body?: ItemBody | null;
    /**
     * Unique ID of the conversation. Read-only.
     */
    conversationId?: string | null;
    /**
     * Unique ID of the conversation thread. Read-only.
     */
    conversationThreadId?: string | null;
    /**
     * The collection of open extensions defined for the post. Read-only. Nullable. Supports $expand.
     */
    extensions?: Extension[] | null;
    /**
     * The from property
     */
    from?: Recipient | null;
    /**
     * Indicates whether the post has at least one attachment. This is a default property.
     */
    hasAttachments?: boolean | null;
    /**
     * Read-only. Supports $expand.
     */
    inReplyTo?: Post | null;
    /**
     * The collection of multi-value extended properties defined for the post. Read-only. Nullable.
     */
    multiValueExtendedProperties?: MultiValueLegacyExtendedProperty[] | null;
    /**
     * Conversation participants that were added to the thread as part of this post.
     */
    newParticipants?: Recipient[] | null;
    /**
     * Specifies when the post was received. The DateTimeOffset type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
     */
    receivedDateTime?: Date | null;
    /**
     * Contains the address of the sender. The value of Sender is assumed to be the address of the authenticated user in the case when Sender is not specified. This is a default property.
     */
    sender?: Recipient | null;
    /**
     * The collection of single-value extended properties defined for the post. Read-only. Nullable.
     */
    singleValueExtendedProperties?: SingleValueLegacyExtendedProperty[] | null;
}
export interface ProfilePhoto extends Entity, Parsable {
    /**
     * The height of the photo. Read-only.
     */
    height?: number | null;
    /**
     * The width of the photo. Read-only.
     */
    width?: number | null;
}
export interface Recipient extends AdditionalDataHolder, Parsable {
    /**
     * The recipient's email address.
     */
    emailAddress?: EmailAddress | null;
    /**
     * The OdataType property
     */
    odataType?: string | null;
}
export interface RecurrencePattern extends AdditionalDataHolder, Parsable {
    /**
     * The day of the month on which the event occurs. Required if type is absoluteMonthly or absoluteYearly.
     */
    dayOfMonth?: number | null;
    /**
     * A collection of the days of the week on which the event occurs. The possible values are: sunday, monday, tuesday, wednesday, thursday, friday, saturday. If type is relativeMonthly or relativeYearly, and daysOfWeek specifies more than one day, the event falls on the first day that satisfies the pattern.  Required if type is weekly, relativeMonthly, or relativeYearly.
     */
    daysOfWeek?: DayOfWeek[] | null;
    /**
     * The first day of the week. The possible values are: sunday, monday, tuesday, wednesday, thursday, friday, saturday. Default is sunday. Required if type is weekly.
     */
    firstDayOfWeek?: DayOfWeek | null;
    /**
     * Specifies on which instance of the allowed days specified in daysOfWeek the event occurs, counted from the first instance in the month. The possible values are: first, second, third, fourth, last. Default is first. Optional and used if type is relativeMonthly or relativeYearly.
     */
    index?: WeekIndex | null;
    /**
     * The number of units between occurrences, where units can be in days, weeks, months, or years, depending on the type. Required.
     */
    interval?: number | null;
    /**
     * The month in which the event occurs.  This is a number from 1 to 12.
     */
    month?: number | null;
    /**
     * The OdataType property
     */
    odataType?: string | null;
    /**
     * The recurrence pattern type: daily, weekly, absoluteMonthly, relativeMonthly, absoluteYearly, relativeYearly. Required. For more information, see values of type property.
     */
    type?: RecurrencePatternType | null;
}
export type RecurrencePatternType = (typeof RecurrencePatternTypeObject)[keyof typeof RecurrencePatternTypeObject];
export interface RecurrenceRange extends AdditionalDataHolder, Parsable {
    /**
     * The date to stop applying the recurrence pattern. Depending on the recurrence pattern of the event, the last occurrence of the meeting may not be this date. Required if type is endDate.
     */
    endDate?: DateOnly | null;
    /**
     * The number of times to repeat the event. Required and must be positive if type is numbered.
     */
    numberOfOccurrences?: number | null;
    /**
     * The OdataType property
     */
    odataType?: string | null;
    /**
     * Time zone for the startDate and endDate properties. Optional. If not specified, the time zone of the event is used.
     */
    recurrenceTimeZone?: string | null;
    /**
     * The date to start applying the recurrence pattern. The first occurrence of the meeting may be this date or later, depending on the recurrence pattern of the event. Must be the same value as the start property of the recurring event. Required.
     */
    startDate?: DateOnly | null;
    /**
     * The recurrence range. The possible values are: endDate, noEnd, numbered. Required.
     */
    type?: RecurrenceRangeType | null;
}
export type RecurrenceRangeType = (typeof RecurrenceRangeTypeObject)[keyof typeof RecurrenceRangeTypeObject];
export interface ReferenceAttachment extends Attachment, Parsable {
}
export interface ResponseStatus extends AdditionalDataHolder, Parsable {
    /**
     * The OdataType property
     */
    odataType?: string | null;
    /**
     * The response type. Possible values are: none, organizer, tentativelyAccepted, accepted, declined, notResponded.To differentiate between none and notResponded:  none – from organizer's perspective. This value is used when the status of an attendee/participant is reported to the organizer of a meeting.  notResponded – from attendee's perspective. Indicates the attendee has not responded to the meeting request.  Clients can treat notResponded == none.  As an example, if attendee Alex hasn't responded to a meeting request, getting Alex' response status for that event in Alex' calendar returns notResponded. Getting Alex' response from the calendar of any other attendee or the organizer's returns none. Getting the organizer's response for the event in anybody's calendar also returns none.
     */
    response?: ResponseType | null;
    /**
     * The date and time when the response was returned. It uses ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
     */
    time?: Date | null;
}
export type ResponseType = (typeof ResponseTypeObject)[keyof typeof ResponseTypeObject];
export type Sensitivity = (typeof SensitivityObject)[keyof typeof SensitivityObject];
/**
 * Serializes information the current object
 * @param Attachment The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeAttachment(writer: SerializationWriter, attachment: Partial<Attachment> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!attachment || isSerializingDerivedType) { return; }
    serializeEntity(writer, attachment, isSerializingDerivedType)
    writer.writeStringValue("contentType", attachment.contentType);
    writer.writeBooleanValue("isInline", attachment.isInline);
    writer.writeDateValue("lastModifiedDateTime", attachment.lastModifiedDateTime);
    writer.writeStringValue("name", attachment.name);
    writer.writeNumberValue("size", attachment.size);
    switch (attachment.odataType) {
        case "#microsoft.graph.fileAttachment":
            serializeFileAttachment(writer, attachment, true);
        break;
        case "#microsoft.graph.itemAttachment":
            serializeItemAttachment(writer, attachment, true);
        break;
        case "#microsoft.graph.referenceAttachment":
            serializeReferenceAttachment(writer, attachment, true);
        break;
    }
}
/**
 * Serializes information the current object
 * @param AttachmentCollectionResponse The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeAttachmentCollectionResponse(writer: SerializationWriter, attachmentCollectionResponse: Partial<AttachmentCollectionResponse> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!attachmentCollectionResponse || isSerializingDerivedType) { return; }
    serializeBaseCollectionPaginationCountResponse(writer, attachmentCollectionResponse, isSerializingDerivedType)
    writer.writeCollectionOfObjectValues<Attachment>("value", attachmentCollectionResponse.value, serializeAttachment);
}
/**
 * Serializes information the current object
 * @param AttachmentItem The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeAttachmentItem(writer: SerializationWriter, attachmentItem: Partial<AttachmentItem> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!attachmentItem || isSerializingDerivedType) { return; }
    writer.writeEnumValue<AttachmentType>("attachmentType", attachmentItem.attachmentType);
    writer.writeStringValue("contentId", attachmentItem.contentId);
    writer.writeStringValue("contentType", attachmentItem.contentType);
    writer.writeBooleanValue("isInline", attachmentItem.isInline);
    writer.writeStringValue("name", attachmentItem.name);
    writer.writeStringValue("@odata.type", attachmentItem.odataType);
    writer.writeNumberValue("size", attachmentItem.size);
    writer.writeAdditionalData(attachmentItem.additionalData);
}
/**
 * Serializes information the current object
 * @param Attendee The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeAttendee(writer: SerializationWriter, attendee: Partial<Attendee> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!attendee || isSerializingDerivedType) { return; }
    serializeAttendeeBase(writer, attendee, isSerializingDerivedType)
    writer.writeObjectValue<TimeSlot>("proposedNewTime", attendee.proposedNewTime, serializeTimeSlot);
    writer.writeObjectValue<ResponseStatus>("status", attendee.status, serializeResponseStatus);
}
/**
 * Serializes information the current object
 * @param AttendeeBase The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeAttendeeBase(writer: SerializationWriter, attendeeBase: Partial<AttendeeBase> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!attendeeBase || isSerializingDerivedType) { return; }
    serializeRecipient(writer, attendeeBase, isSerializingDerivedType)
    writer.writeEnumValue<AttendeeType>("type", attendeeBase.type);
    switch (attendeeBase.odataType) {
        case "#microsoft.graph.attendee":
            serializeAttendee(writer, attendeeBase, true);
        break;
    }
}
/**
 * Serializes information the current object
 * @param BaseCollectionPaginationCountResponse The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeBaseCollectionPaginationCountResponse(writer: SerializationWriter, baseCollectionPaginationCountResponse: Partial<BaseCollectionPaginationCountResponse> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!baseCollectionPaginationCountResponse || isSerializingDerivedType) { return; }
    writer.writeNumberValue("@odata.count", baseCollectionPaginationCountResponse.odataCount);
    writer.writeStringValue("@odata.nextLink", baseCollectionPaginationCountResponse.odataNextLink);
    writer.writeAdditionalData(baseCollectionPaginationCountResponse.additionalData);
}
/**
 * Serializes information the current object
 * @param BaseDeltaFunctionResponse The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeBaseDeltaFunctionResponse(writer: SerializationWriter, baseDeltaFunctionResponse: Partial<BaseDeltaFunctionResponse> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!baseDeltaFunctionResponse || isSerializingDerivedType) { return; }
    writer.writeStringValue("@odata.deltaLink", baseDeltaFunctionResponse.odataDeltaLink);
    writer.writeStringValue("@odata.nextLink", baseDeltaFunctionResponse.odataNextLink);
    writer.writeAdditionalData(baseDeltaFunctionResponse.additionalData);
}
/**
 * Serializes information the current object
 * @param Calendar The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeCalendar(writer: SerializationWriter, calendar: Partial<Calendar> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!calendar || isSerializingDerivedType) { return; }
    serializeEntity(writer, calendar, isSerializingDerivedType)
    if(calendar.allowedOnlineMeetingProviders)
    writer.writeCollectionOfEnumValues<OnlineMeetingProviderType>("allowedOnlineMeetingProviders", calendar.allowedOnlineMeetingProviders);
    writer.writeCollectionOfObjectValues<CalendarPermission>("calendarPermissions", calendar.calendarPermissions, serializeCalendarPermission);
    writer.writeCollectionOfObjectValues<Event>("calendarView", calendar.calendarView, serializeEvent);
    writer.writeBooleanValue("canEdit", calendar.canEdit);
    writer.writeBooleanValue("canShare", calendar.canShare);
    writer.writeBooleanValue("canViewPrivateItems", calendar.canViewPrivateItems);
    writer.writeStringValue("changeKey", calendar.changeKey);
    writer.writeEnumValue<CalendarColor>("color", calendar.color);
    writer.writeEnumValue<OnlineMeetingProviderType>("defaultOnlineMeetingProvider", calendar.defaultOnlineMeetingProvider);
    writer.writeCollectionOfObjectValues<Event>("events", calendar.events, serializeEvent);
    writer.writeStringValue("hexColor", calendar.hexColor);
    writer.writeBooleanValue("isDefaultCalendar", calendar.isDefaultCalendar);
    writer.writeBooleanValue("isRemovable", calendar.isRemovable);
    writer.writeBooleanValue("isTallyingResponses", calendar.isTallyingResponses);
    writer.writeCollectionOfObjectValues<MultiValueLegacyExtendedProperty>("multiValueExtendedProperties", calendar.multiValueExtendedProperties, serializeMultiValueLegacyExtendedProperty);
    writer.writeStringValue("name", calendar.name);
    writer.writeObjectValue<EmailAddress>("owner", calendar.owner, serializeEmailAddress);
    writer.writeCollectionOfObjectValues<SingleValueLegacyExtendedProperty>("singleValueExtendedProperties", calendar.singleValueExtendedProperties, serializeSingleValueLegacyExtendedProperty);
}
/**
 * Serializes information the current object
 * @param CalendarPermission The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeCalendarPermission(writer: SerializationWriter, calendarPermission: Partial<CalendarPermission> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!calendarPermission || isSerializingDerivedType) { return; }
    serializeEntity(writer, calendarPermission, isSerializingDerivedType)
    if(calendarPermission.allowedRoles)
    writer.writeCollectionOfEnumValues<CalendarRoleType>("allowedRoles", calendarPermission.allowedRoles);
    writer.writeObjectValue<EmailAddress>("emailAddress", calendarPermission.emailAddress, serializeEmailAddress);
    writer.writeBooleanValue("isInsideOrganization", calendarPermission.isInsideOrganization);
    writer.writeBooleanValue("isRemovable", calendarPermission.isRemovable);
    writer.writeEnumValue<CalendarRoleType>("role", calendarPermission.role);
}
/**
 * Serializes information the current object
 * @param CalendarSharingMessage The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeCalendarSharingMessage(writer: SerializationWriter, calendarSharingMessage: Partial<CalendarSharingMessage> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!calendarSharingMessage || isSerializingDerivedType) { return; }
    serializeMessage(writer, calendarSharingMessage, isSerializingDerivedType)
    writer.writeBooleanValue("canAccept", calendarSharingMessage.canAccept);
    writer.writeObjectValue<CalendarSharingMessageAction>("sharingMessageAction", calendarSharingMessage.sharingMessageAction, serializeCalendarSharingMessageAction);
    writer.writeCollectionOfObjectValues<CalendarSharingMessageAction>("sharingMessageActions", calendarSharingMessage.sharingMessageActions, serializeCalendarSharingMessageAction);
    writer.writeStringValue("suggestedCalendarName", calendarSharingMessage.suggestedCalendarName);
}
/**
 * Serializes information the current object
 * @param CalendarSharingMessageAction The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeCalendarSharingMessageAction(writer: SerializationWriter, calendarSharingMessageAction: Partial<CalendarSharingMessageAction> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!calendarSharingMessageAction || isSerializingDerivedType) { return; }
    writer.writeEnumValue<CalendarSharingAction>("action", calendarSharingMessageAction.action);
    writer.writeEnumValue<CalendarSharingActionType>("actionType", calendarSharingMessageAction.actionType);
    writer.writeEnumValue<CalendarSharingActionImportance>("importance", calendarSharingMessageAction.importance);
    writer.writeStringValue("@odata.type", calendarSharingMessageAction.odataType);
    writer.writeAdditionalData(calendarSharingMessageAction.additionalData);
}
/**
 * Serializes information the current object
 * @param Contact The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeContact(writer: SerializationWriter, contact: Partial<Contact> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!contact || isSerializingDerivedType) { return; }
    serializeOutlookItem(writer, contact, isSerializingDerivedType)
    writer.writeStringValue("assistantName", contact.assistantName);
    writer.writeDateValue("birthday", contact.birthday);
    writer.writeObjectValue<PhysicalAddress>("businessAddress", contact.businessAddress, serializePhysicalAddress);
    writer.writeStringValue("businessHomePage", contact.businessHomePage);
    writer.writeCollectionOfPrimitiveValues<string>("businessPhones", contact.businessPhones);
    writer.writeCollectionOfPrimitiveValues<string>("children", contact.children);
    writer.writeStringValue("companyName", contact.companyName);
    writer.writeStringValue("department", contact.department);
    writer.writeStringValue("displayName", contact.displayName);
    writer.writeCollectionOfObjectValues<EmailAddress>("emailAddresses", contact.emailAddresses, serializeEmailAddress);
    writer.writeCollectionOfObjectValues<Extension>("extensions", contact.extensions, serializeExtension);
    writer.writeStringValue("fileAs", contact.fileAs);
    writer.writeStringValue("generation", contact.generation);
    writer.writeStringValue("givenName", contact.givenName);
    writer.writeObjectValue<PhysicalAddress>("homeAddress", contact.homeAddress, serializePhysicalAddress);
    writer.writeCollectionOfPrimitiveValues<string>("homePhones", contact.homePhones);
    writer.writeCollectionOfPrimitiveValues<string>("imAddresses", contact.imAddresses);
    writer.writeStringValue("initials", contact.initials);
    writer.writeStringValue("jobTitle", contact.jobTitle);
    writer.writeStringValue("manager", contact.manager);
    writer.writeStringValue("middleName", contact.middleName);
    writer.writeStringValue("mobilePhone", contact.mobilePhone);
    writer.writeCollectionOfObjectValues<MultiValueLegacyExtendedProperty>("multiValueExtendedProperties", contact.multiValueExtendedProperties, serializeMultiValueLegacyExtendedProperty);
    writer.writeStringValue("nickName", contact.nickName);
    writer.writeStringValue("officeLocation", contact.officeLocation);
    writer.writeObjectValue<PhysicalAddress>("otherAddress", contact.otherAddress, serializePhysicalAddress);
    writer.writeStringValue("parentFolderId", contact.parentFolderId);
    writer.writeStringValue("personalNotes", contact.personalNotes);
    writer.writeObjectValue<ProfilePhoto>("photo", contact.photo, serializeProfilePhoto);
    writer.writeStringValue("profession", contact.profession);
    writer.writeCollectionOfObjectValues<SingleValueLegacyExtendedProperty>("singleValueExtendedProperties", contact.singleValueExtendedProperties, serializeSingleValueLegacyExtendedProperty);
    writer.writeStringValue("spouseName", contact.spouseName);
    writer.writeStringValue("surname", contact.surname);
    writer.writeStringValue("title", contact.title);
    writer.writeStringValue("yomiCompanyName", contact.yomiCompanyName);
    writer.writeStringValue("yomiGivenName", contact.yomiGivenName);
    writer.writeStringValue("yomiSurname", contact.yomiSurname);
}
/**
 * Serializes information the current object
 * @param DateTimeTimeZone The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeDateTimeTimeZone(writer: SerializationWriter, dateTimeTimeZone: Partial<DateTimeTimeZone> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!dateTimeTimeZone || isSerializingDerivedType) { return; }
    writer.writeStringValue("dateTime", dateTimeTimeZone.dateTime);
    writer.writeStringValue("@odata.type", dateTimeTimeZone.odataType);
    writer.writeStringValue("timeZone", dateTimeTimeZone.timeZone);
    writer.writeAdditionalData(dateTimeTimeZone.additionalData);
}
/**
 * Serializes information the current object
 * @param EmailAddress The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeEmailAddress(writer: SerializationWriter, emailAddress: Partial<EmailAddress> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!emailAddress || isSerializingDerivedType) { return; }
    writer.writeStringValue("address", emailAddress.address);
    writer.writeStringValue("name", emailAddress.name);
    writer.writeStringValue("@odata.type", emailAddress.odataType);
    writer.writeAdditionalData(emailAddress.additionalData);
}
/**
 * Serializes information the current object
 * @param Entity The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeEntity(writer: SerializationWriter, entity: Partial<Entity> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!entity || isSerializingDerivedType) { return; }
    writer.writeStringValue("id", entity.id);
    writer.writeStringValue("@odata.type", entity.odataType);
    writer.writeAdditionalData(entity.additionalData);
    switch (entity.odataType) {
        case "#microsoft.graph.attachment":
            serializeAttachment(writer, entity, true);
        break;
        case "#microsoft.graph.calendar":
            serializeCalendar(writer, entity, true);
        break;
        case "#microsoft.graph.calendarPermission":
            serializeCalendarPermission(writer, entity, true);
        break;
        case "#microsoft.graph.calendarSharingMessage":
            serializeCalendarSharingMessage(writer, entity, true);
        break;
        case "#microsoft.graph.contact":
            serializeContact(writer, entity, true);
        break;
        case "#microsoft.graph.event":
            serializeEvent(writer, entity, true);
        break;
        case "#microsoft.graph.eventMessage":
            serializeEventMessage(writer, entity, true);
        break;
        case "#microsoft.graph.eventMessageRequest":
            serializeEventMessageRequest(writer, entity, true);
        break;
        case "#microsoft.graph.eventMessageResponse":
            serializeEventMessageResponse(writer, entity, true);
        break;
        case "#microsoft.graph.extension":
            serializeExtension(writer, entity, true);
        break;
        case "#microsoft.graph.fileAttachment":
            serializeFileAttachment(writer, entity, true);
        break;
        case "#microsoft.graph.itemAttachment":
            serializeItemAttachment(writer, entity, true);
        break;
        case "#microsoft.graph.mailFolder":
            serializeMailFolder(writer, entity, true);
        break;
        case "#microsoft.graph.mailSearchFolder":
            serializeMailSearchFolder(writer, entity, true);
        break;
        case "#microsoft.graph.message":
            serializeMessage(writer, entity, true);
        break;
        case "#microsoft.graph.messageRule":
            serializeMessageRule(writer, entity, true);
        break;
        case "#microsoft.graph.multiValueLegacyExtendedProperty":
            serializeMultiValueLegacyExtendedProperty(writer, entity, true);
        break;
        case "#microsoft.graph.openTypeExtension":
            serializeOpenTypeExtension(writer, entity, true);
        break;
        case "#microsoft.graph.outlookItem":
            serializeOutlookItem(writer, entity, true);
        break;
        case "#microsoft.graph.post":
            serializePost(writer, entity, true);
        break;
        case "#microsoft.graph.profilePhoto":
            serializeProfilePhoto(writer, entity, true);
        break;
        case "#microsoft.graph.referenceAttachment":
            serializeReferenceAttachment(writer, entity, true);
        break;
        case "#microsoft.graph.singleValueLegacyExtendedProperty":
            serializeSingleValueLegacyExtendedProperty(writer, entity, true);
        break;
    }
}
/**
 * Serializes information the current object
 * @param Event The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeEvent(writer: SerializationWriter, event: Partial<Event> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!event || isSerializingDerivedType) { return; }
    serializeOutlookItem(writer, event, isSerializingDerivedType)
    writer.writeBooleanValue("allowNewTimeProposals", event.allowNewTimeProposals);
    writer.writeCollectionOfObjectValues<Attachment>("attachments", event.attachments, serializeAttachment);
    writer.writeCollectionOfObjectValues<Attendee>("attendees", event.attendees, serializeAttendee);
    writer.writeObjectValue<ItemBody>("body", event.body, serializeItemBody);
    writer.writeStringValue("bodyPreview", event.bodyPreview);
    writer.writeObjectValue<Calendar>("calendar", event.calendar, serializeCalendar);
    writer.writeCollectionOfPrimitiveValues<string>("cancelledOccurrences", event.cancelledOccurrences);
    writer.writeObjectValue<DateTimeTimeZone>("end", event.end, serializeDateTimeTimeZone);
    writer.writeCollectionOfObjectValues<Event>("exceptionOccurrences", event.exceptionOccurrences, serializeEvent);
    writer.writeCollectionOfObjectValues<Extension>("extensions", event.extensions, serializeExtension);
    writer.writeBooleanValue("hasAttachments", event.hasAttachments);
    writer.writeBooleanValue("hideAttendees", event.hideAttendees);
    writer.writeStringValue("iCalUId", event.iCalUId);
    writer.writeEnumValue<Importance>("importance", event.importance);
    writer.writeCollectionOfObjectValues<Event>("instances", event.instances, serializeEvent);
    writer.writeBooleanValue("isAllDay", event.isAllDay);
    writer.writeBooleanValue("isCancelled", event.isCancelled);
    writer.writeBooleanValue("isDraft", event.isDraft);
    writer.writeBooleanValue("isOnlineMeeting", event.isOnlineMeeting);
    writer.writeBooleanValue("isOrganizer", event.isOrganizer);
    writer.writeBooleanValue("isReminderOn", event.isReminderOn);
    writer.writeObjectValue<Location>("location", event.location, serializeLocation);
    writer.writeCollectionOfObjectValues<Location>("locations", event.locations, serializeLocation);
    writer.writeCollectionOfObjectValues<MultiValueLegacyExtendedProperty>("multiValueExtendedProperties", event.multiValueExtendedProperties, serializeMultiValueLegacyExtendedProperty);
    writer.writeObjectValue<OnlineMeetingInfo>("onlineMeeting", event.onlineMeeting, serializeOnlineMeetingInfo);
    writer.writeEnumValue<OnlineMeetingProviderType>("onlineMeetingProvider", event.onlineMeetingProvider);
    writer.writeStringValue("onlineMeetingUrl", event.onlineMeetingUrl);
    writer.writeObjectValue<Recipient>("organizer", event.organizer, serializeRecipient);
    writer.writeStringValue("originalEndTimeZone", event.originalEndTimeZone);
    writer.writeDateValue("originalStart", event.originalStart);
    writer.writeStringValue("originalStartTimeZone", event.originalStartTimeZone);
    writer.writeObjectValue<PatternedRecurrence>("recurrence", event.recurrence, serializePatternedRecurrence);
    writer.writeNumberValue("reminderMinutesBeforeStart", event.reminderMinutesBeforeStart);
    writer.writeBooleanValue("responseRequested", event.responseRequested);
    writer.writeObjectValue<ResponseStatus>("responseStatus", event.responseStatus, serializeResponseStatus);
    writer.writeEnumValue<Sensitivity>("sensitivity", event.sensitivity);
    writer.writeStringValue("seriesMasterId", event.seriesMasterId);
    writer.writeEnumValue<FreeBusyStatus>("showAs", event.showAs);
    writer.writeCollectionOfObjectValues<SingleValueLegacyExtendedProperty>("singleValueExtendedProperties", event.singleValueExtendedProperties, serializeSingleValueLegacyExtendedProperty);
    writer.writeObjectValue<DateTimeTimeZone>("start", event.start, serializeDateTimeTimeZone);
    writer.writeStringValue("subject", event.subject);
    writer.writeStringValue("transactionId", event.transactionId);
    writer.writeEnumValue<EventType>("type", event.type);
    writer.writeStringValue("webLink", event.webLink);
}
/**
 * Serializes information the current object
 * @param EventCollectionResponse The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeEventCollectionResponse(writer: SerializationWriter, eventCollectionResponse: Partial<EventCollectionResponse> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!eventCollectionResponse || isSerializingDerivedType) { return; }
    serializeBaseCollectionPaginationCountResponse(writer, eventCollectionResponse, isSerializingDerivedType)
    writer.writeCollectionOfObjectValues<Event>("value", eventCollectionResponse.value, serializeEvent);
}
/**
 * Serializes information the current object
 * @param EventMessage The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeEventMessage(writer: SerializationWriter, eventMessage: Partial<EventMessage> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!eventMessage || isSerializingDerivedType) { return; }
    serializeMessage(writer, eventMessage, isSerializingDerivedType)
    writer.writeObjectValue<DateTimeTimeZone>("endDateTime", eventMessage.endDateTime, serializeDateTimeTimeZone);
    writer.writeObjectValue<Event>("event", eventMessage.event, serializeEvent);
    writer.writeBooleanValue("isAllDay", eventMessage.isAllDay);
    writer.writeBooleanValue("isDelegated", eventMessage.isDelegated);
    writer.writeBooleanValue("isOutOfDate", eventMessage.isOutOfDate);
    writer.writeObjectValue<Location>("location", eventMessage.location, serializeLocation);
    writer.writeEnumValue<MeetingMessageType>("meetingMessageType", eventMessage.meetingMessageType);
    writer.writeObjectValue<PatternedRecurrence>("recurrence", eventMessage.recurrence, serializePatternedRecurrence);
    writer.writeObjectValue<DateTimeTimeZone>("startDateTime", eventMessage.startDateTime, serializeDateTimeTimeZone);
    writer.writeEnumValue<EventType>("type", eventMessage.type);
    switch (eventMessage.odataType) {
        case "#microsoft.graph.eventMessageRequest":
            serializeEventMessageRequest(writer, eventMessage, true);
        break;
        case "#microsoft.graph.eventMessageResponse":
            serializeEventMessageResponse(writer, eventMessage, true);
        break;
    }
}
/**
 * Serializes information the current object
 * @param EventMessageRequest The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeEventMessageRequest(writer: SerializationWriter, eventMessageRequest: Partial<EventMessageRequest> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!eventMessageRequest || isSerializingDerivedType) { return; }
    serializeEventMessage(writer, eventMessageRequest, isSerializingDerivedType)
    writer.writeBooleanValue("allowNewTimeProposals", eventMessageRequest.allowNewTimeProposals);
    writer.writeEnumValue<MeetingRequestType>("meetingRequestType", eventMessageRequest.meetingRequestType);
    writer.writeObjectValue<DateTimeTimeZone>("previousEndDateTime", eventMessageRequest.previousEndDateTime, serializeDateTimeTimeZone);
    writer.writeObjectValue<Location>("previousLocation", eventMessageRequest.previousLocation, serializeLocation);
    writer.writeObjectValue<DateTimeTimeZone>("previousStartDateTime", eventMessageRequest.previousStartDateTime, serializeDateTimeTimeZone);
    writer.writeBooleanValue("responseRequested", eventMessageRequest.responseRequested);
}
/**
 * Serializes information the current object
 * @param EventMessageResponse The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeEventMessageResponse(writer: SerializationWriter, eventMessageResponse: Partial<EventMessageResponse> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!eventMessageResponse || isSerializingDerivedType) { return; }
    serializeEventMessage(writer, eventMessageResponse, isSerializingDerivedType)
    writer.writeObjectValue<TimeSlot>("proposedNewTime", eventMessageResponse.proposedNewTime, serializeTimeSlot);
    writer.writeEnumValue<ResponseType>("responseType", eventMessageResponse.responseType);
}
/**
 * Serializes information the current object
 * @param Extension The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeExtension(writer: SerializationWriter, extension: Partial<Extension> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!extension || isSerializingDerivedType) { return; }
    serializeEntity(writer, extension, isSerializingDerivedType)
    switch (extension.odataType) {
        case "#microsoft.graph.openTypeExtension":
            serializeOpenTypeExtension(writer, extension, true);
        break;
    }
}
/**
 * Serializes information the current object
 * @param ExtensionCollectionResponse The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeExtensionCollectionResponse(writer: SerializationWriter, extensionCollectionResponse: Partial<ExtensionCollectionResponse> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!extensionCollectionResponse || isSerializingDerivedType) { return; }
    serializeBaseCollectionPaginationCountResponse(writer, extensionCollectionResponse, isSerializingDerivedType)
    writer.writeCollectionOfObjectValues<Extension>("value", extensionCollectionResponse.value, serializeExtension);
}
/**
 * Serializes information the current object
 * @param FileAttachment The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeFileAttachment(writer: SerializationWriter, fileAttachment: Partial<FileAttachment> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!fileAttachment || isSerializingDerivedType) { return; }
    serializeAttachment(writer, fileAttachment, isSerializingDerivedType)
    writer.writeByteArrayValue("contentBytes", fileAttachment.contentBytes);
    writer.writeStringValue("contentId", fileAttachment.contentId);
    writer.writeStringValue("contentLocation", fileAttachment.contentLocation);
}
/**
 * Serializes information the current object
 * @param FollowupFlag The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeFollowupFlag(writer: SerializationWriter, followupFlag: Partial<FollowupFlag> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!followupFlag || isSerializingDerivedType) { return; }
    writer.writeObjectValue<DateTimeTimeZone>("completedDateTime", followupFlag.completedDateTime, serializeDateTimeTimeZone);
    writer.writeObjectValue<DateTimeTimeZone>("dueDateTime", followupFlag.dueDateTime, serializeDateTimeTimeZone);
    writer.writeEnumValue<FollowupFlagStatus>("flagStatus", followupFlag.flagStatus);
    writer.writeStringValue("@odata.type", followupFlag.odataType);
    writer.writeObjectValue<DateTimeTimeZone>("startDateTime", followupFlag.startDateTime, serializeDateTimeTimeZone);
    writer.writeAdditionalData(followupFlag.additionalData);
}
/**
 * Serializes information the current object
 * @param InternetMessageHeader The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeInternetMessageHeader(writer: SerializationWriter, internetMessageHeader: Partial<InternetMessageHeader> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!internetMessageHeader || isSerializingDerivedType) { return; }
    writer.writeStringValue("name", internetMessageHeader.name);
    writer.writeStringValue("@odata.type", internetMessageHeader.odataType);
    writer.writeStringValue("value", internetMessageHeader.value);
    writer.writeAdditionalData(internetMessageHeader.additionalData);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param ItemAttachment The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeItemAttachment(writer: SerializationWriter, itemAttachment: Partial<ItemAttachment> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!itemAttachment || isSerializingDerivedType) { return; }
    serializeAttachment(writer, itemAttachment, isSerializingDerivedType)
    writer.writeObjectValue<OutlookItem>("item", itemAttachment.item, serializeOutlookItem);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param ItemBody The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeItemBody(writer: SerializationWriter, itemBody: Partial<ItemBody> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!itemBody || isSerializingDerivedType) { return; }
    writer.writeStringValue("content", itemBody.content);
    writer.writeEnumValue<BodyType>("contentType", itemBody.contentType);
    writer.writeStringValue("@odata.type", itemBody.odataType);
    writer.writeAdditionalData(itemBody.additionalData);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param Location The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeLocation(writer: SerializationWriter, location: Partial<Location> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!location || isSerializingDerivedType) { return; }
    writer.writeObjectValue<PhysicalAddress>("address", location.address, serializePhysicalAddress);
    writer.writeObjectValue<OutlookGeoCoordinates>("coordinates", location.coordinates, serializeOutlookGeoCoordinates);
    writer.writeStringValue("displayName", location.displayName);
    writer.writeStringValue("locationEmailAddress", location.locationEmailAddress);
    writer.writeEnumValue<LocationType>("locationType", location.locationType);
    writer.writeStringValue("locationUri", location.locationUri);
    writer.writeStringValue("@odata.type", location.odataType);
    writer.writeStringValue("uniqueId", location.uniqueId);
    writer.writeEnumValue<LocationUniqueIdType>("uniqueIdType", location.uniqueIdType);
    writer.writeAdditionalData(location.additionalData);
    switch (location.odataType) {
        case "#microsoft.graph.locationConstraintItem":
            serializeLocationConstraintItem(writer, location, true);
        break;
    }
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param LocationConstraintItem The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeLocationConstraintItem(writer: SerializationWriter, locationConstraintItem: Partial<LocationConstraintItem> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!locationConstraintItem || isSerializingDerivedType) { return; }
    serializeLocation(writer, locationConstraintItem, isSerializingDerivedType)
    writer.writeBooleanValue("resolveAvailability", locationConstraintItem.resolveAvailability);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param MailFolder The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeMailFolder(writer: SerializationWriter, mailFolder: Partial<MailFolder> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!mailFolder || isSerializingDerivedType) { return; }
    serializeEntity(writer, mailFolder, isSerializingDerivedType)
    writer.writeNumberValue("childFolderCount", mailFolder.childFolderCount);
    writer.writeCollectionOfObjectValues<MailFolder>("childFolders", mailFolder.childFolders, serializeMailFolder);
    writer.writeStringValue("displayName", mailFolder.displayName);
    writer.writeBooleanValue("isHidden", mailFolder.isHidden);
    writer.writeCollectionOfObjectValues<MessageRule>("messageRules", mailFolder.messageRules, serializeMessageRule);
    writer.writeCollectionOfObjectValues<Message>("messages", mailFolder.messages, serializeMessage);
    writer.writeCollectionOfObjectValues<MultiValueLegacyExtendedProperty>("multiValueExtendedProperties", mailFolder.multiValueExtendedProperties, serializeMultiValueLegacyExtendedProperty);
    writer.writeStringValue("parentFolderId", mailFolder.parentFolderId);
    writer.writeCollectionOfObjectValues<SingleValueLegacyExtendedProperty>("singleValueExtendedProperties", mailFolder.singleValueExtendedProperties, serializeSingleValueLegacyExtendedProperty);
    writer.writeNumberValue("totalItemCount", mailFolder.totalItemCount);
    writer.writeNumberValue("unreadItemCount", mailFolder.unreadItemCount);
    switch (mailFolder.odataType) {
        case "#microsoft.graph.mailSearchFolder":
            serializeMailSearchFolder(writer, mailFolder, true);
        break;
    }
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param MailFolderCollectionResponse The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeMailFolderCollectionResponse(writer: SerializationWriter, mailFolderCollectionResponse: Partial<MailFolderCollectionResponse> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!mailFolderCollectionResponse || isSerializingDerivedType) { return; }
    serializeBaseCollectionPaginationCountResponse(writer, mailFolderCollectionResponse, isSerializingDerivedType)
    writer.writeCollectionOfObjectValues<MailFolder>("value", mailFolderCollectionResponse.value, serializeMailFolder);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param MailSearchFolder The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeMailSearchFolder(writer: SerializationWriter, mailSearchFolder: Partial<MailSearchFolder> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!mailSearchFolder || isSerializingDerivedType) { return; }
    serializeMailFolder(writer, mailSearchFolder, isSerializingDerivedType)
    writer.writeStringValue("filterQuery", mailSearchFolder.filterQuery);
    writer.writeBooleanValue("includeNestedFolders", mailSearchFolder.includeNestedFolders);
    writer.writeBooleanValue("isSupported", mailSearchFolder.isSupported);
    writer.writeCollectionOfPrimitiveValues<string>("sourceFolderIds", mailSearchFolder.sourceFolderIds);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param Message The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeMessage(writer: SerializationWriter, message: Partial<Message> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!message || isSerializingDerivedType) { return; }
    serializeOutlookItem(writer, message, isSerializingDerivedType)
    writer.writeCollectionOfObjectValues<Attachment>("attachments", message.attachments, serializeAttachment);
    writer.writeCollectionOfObjectValues<Recipient>("bccRecipients", message.bccRecipients, serializeRecipient);
    writer.writeObjectValue<ItemBody>("body", message.body, serializeItemBody);
    writer.writeStringValue("bodyPreview", message.bodyPreview);
    writer.writeCollectionOfObjectValues<Recipient>("ccRecipients", message.ccRecipients, serializeRecipient);
    writer.writeStringValue("conversationId", message.conversationId);
    writer.writeByteArrayValue("conversationIndex", message.conversationIndex);
    writer.writeCollectionOfObjectValues<Extension>("extensions", message.extensions, serializeExtension);
    writer.writeObjectValue<FollowupFlag>("flag", message.flag, serializeFollowupFlag);
    writer.writeObjectValue<Recipient>("from", message.from, serializeRecipient);
    writer.writeBooleanValue("hasAttachments", message.hasAttachments);
    writer.writeEnumValue<Importance>("importance", message.importance);
    writer.writeEnumValue<InferenceClassificationType>("inferenceClassification", message.inferenceClassification);
    writer.writeCollectionOfObjectValues<InternetMessageHeader>("internetMessageHeaders", message.internetMessageHeaders, serializeInternetMessageHeader);
    writer.writeStringValue("internetMessageId", message.internetMessageId);
    writer.writeBooleanValue("isDeliveryReceiptRequested", message.isDeliveryReceiptRequested);
    writer.writeBooleanValue("isDraft", message.isDraft);
    writer.writeBooleanValue("isRead", message.isRead);
    writer.writeBooleanValue("isReadReceiptRequested", message.isReadReceiptRequested);
    writer.writeCollectionOfObjectValues<MultiValueLegacyExtendedProperty>("multiValueExtendedProperties", message.multiValueExtendedProperties, serializeMultiValueLegacyExtendedProperty);
    writer.writeStringValue("parentFolderId", message.parentFolderId);
    writer.writeDateValue("receivedDateTime", message.receivedDateTime);
    writer.writeCollectionOfObjectValues<Recipient>("replyTo", message.replyTo, serializeRecipient);
    writer.writeObjectValue<Recipient>("sender", message.sender, serializeRecipient);
    writer.writeDateValue("sentDateTime", message.sentDateTime);
    writer.writeCollectionOfObjectValues<SingleValueLegacyExtendedProperty>("singleValueExtendedProperties", message.singleValueExtendedProperties, serializeSingleValueLegacyExtendedProperty);
    writer.writeStringValue("subject", message.subject);
    writer.writeCollectionOfObjectValues<Recipient>("toRecipients", message.toRecipients, serializeRecipient);
    writer.writeObjectValue<ItemBody>("uniqueBody", message.uniqueBody, serializeItemBody);
    writer.writeStringValue("webLink", message.webLink);
    switch (message.odataType) {
        case "#microsoft.graph.calendarSharingMessage":
            serializeCalendarSharingMessage(writer, message, true);
        break;
        case "#microsoft.graph.eventMessage":
            serializeEventMessage(writer, message, true);
        break;
        case "#microsoft.graph.eventMessageRequest":
            serializeEventMessageRequest(writer, message, true);
        break;
        case "#microsoft.graph.eventMessageResponse":
            serializeEventMessageResponse(writer, message, true);
        break;
    }
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param MessageCollectionResponse The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeMessageCollectionResponse(writer: SerializationWriter, messageCollectionResponse: Partial<MessageCollectionResponse> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!messageCollectionResponse || isSerializingDerivedType) { return; }
    serializeBaseCollectionPaginationCountResponse(writer, messageCollectionResponse, isSerializingDerivedType)
    writer.writeCollectionOfObjectValues<Message>("value", messageCollectionResponse.value, serializeMessage);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param MessageRule The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeMessageRule(writer: SerializationWriter, messageRule: Partial<MessageRule> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!messageRule || isSerializingDerivedType) { return; }
    serializeEntity(writer, messageRule, isSerializingDerivedType)
    writer.writeObjectValue<MessageRuleActions>("actions", messageRule.actions, serializeMessageRuleActions);
    writer.writeObjectValue<MessageRulePredicates>("conditions", messageRule.conditions, serializeMessageRulePredicates);
    writer.writeStringValue("displayName", messageRule.displayName);
    writer.writeObjectValue<MessageRulePredicates>("exceptions", messageRule.exceptions, serializeMessageRulePredicates);
    writer.writeBooleanValue("hasError", messageRule.hasError);
    writer.writeBooleanValue("isEnabled", messageRule.isEnabled);
    writer.writeBooleanValue("isReadOnly", messageRule.isReadOnly);
    writer.writeNumberValue("sequence", messageRule.sequence);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param MessageRuleActions The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeMessageRuleActions(writer: SerializationWriter, messageRuleActions: Partial<MessageRuleActions> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!messageRuleActions || isSerializingDerivedType) { return; }
    writer.writeCollectionOfPrimitiveValues<string>("assignCategories", messageRuleActions.assignCategories);
    writer.writeStringValue("copyToFolder", messageRuleActions.copyToFolder);
    writer.writeBooleanValue("delete", messageRuleActions.delete);
    writer.writeCollectionOfObjectValues<Recipient>("forwardAsAttachmentTo", messageRuleActions.forwardAsAttachmentTo, serializeRecipient);
    writer.writeCollectionOfObjectValues<Recipient>("forwardTo", messageRuleActions.forwardTo, serializeRecipient);
    writer.writeBooleanValue("markAsRead", messageRuleActions.markAsRead);
    writer.writeEnumValue<Importance>("markImportance", messageRuleActions.markImportance);
    writer.writeStringValue("moveToFolder", messageRuleActions.moveToFolder);
    writer.writeStringValue("@odata.type", messageRuleActions.odataType);
    writer.writeBooleanValue("permanentDelete", messageRuleActions.permanentDelete);
    writer.writeCollectionOfObjectValues<Recipient>("redirectTo", messageRuleActions.redirectTo, serializeRecipient);
    writer.writeBooleanValue("stopProcessingRules", messageRuleActions.stopProcessingRules);
    writer.writeAdditionalData(messageRuleActions.additionalData);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param MessageRuleCollectionResponse The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeMessageRuleCollectionResponse(writer: SerializationWriter, messageRuleCollectionResponse: Partial<MessageRuleCollectionResponse> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!messageRuleCollectionResponse || isSerializingDerivedType) { return; }
    serializeBaseCollectionPaginationCountResponse(writer, messageRuleCollectionResponse, isSerializingDerivedType)
    writer.writeCollectionOfObjectValues<MessageRule>("value", messageRuleCollectionResponse.value, serializeMessageRule);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param MessageRulePredicates The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeMessageRulePredicates(writer: SerializationWriter, messageRulePredicates: Partial<MessageRulePredicates> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!messageRulePredicates || isSerializingDerivedType) { return; }
    writer.writeCollectionOfPrimitiveValues<string>("bodyContains", messageRulePredicates.bodyContains);
    writer.writeCollectionOfPrimitiveValues<string>("bodyOrSubjectContains", messageRulePredicates.bodyOrSubjectContains);
    writer.writeCollectionOfPrimitiveValues<string>("categories", messageRulePredicates.categories);
    writer.writeCollectionOfObjectValues<Recipient>("fromAddresses", messageRulePredicates.fromAddresses, serializeRecipient);
    writer.writeBooleanValue("hasAttachments", messageRulePredicates.hasAttachments);
    writer.writeCollectionOfPrimitiveValues<string>("headerContains", messageRulePredicates.headerContains);
    writer.writeEnumValue<Importance>("importance", messageRulePredicates.importance);
    writer.writeBooleanValue("isApprovalRequest", messageRulePredicates.isApprovalRequest);
    writer.writeBooleanValue("isAutomaticForward", messageRulePredicates.isAutomaticForward);
    writer.writeBooleanValue("isAutomaticReply", messageRulePredicates.isAutomaticReply);
    writer.writeBooleanValue("isEncrypted", messageRulePredicates.isEncrypted);
    writer.writeBooleanValue("isMeetingRequest", messageRulePredicates.isMeetingRequest);
    writer.writeBooleanValue("isMeetingResponse", messageRulePredicates.isMeetingResponse);
    writer.writeBooleanValue("isNonDeliveryReport", messageRulePredicates.isNonDeliveryReport);
    writer.writeBooleanValue("isPermissionControlled", messageRulePredicates.isPermissionControlled);
    writer.writeBooleanValue("isReadReceipt", messageRulePredicates.isReadReceipt);
    writer.writeBooleanValue("isSigned", messageRulePredicates.isSigned);
    writer.writeBooleanValue("isVoicemail", messageRulePredicates.isVoicemail);
    writer.writeEnumValue<MessageActionFlag>("messageActionFlag", messageRulePredicates.messageActionFlag);
    writer.writeBooleanValue("notSentToMe", messageRulePredicates.notSentToMe);
    writer.writeStringValue("@odata.type", messageRulePredicates.odataType);
    writer.writeCollectionOfPrimitiveValues<string>("recipientContains", messageRulePredicates.recipientContains);
    writer.writeCollectionOfPrimitiveValues<string>("senderContains", messageRulePredicates.senderContains);
    writer.writeEnumValue<Sensitivity>("sensitivity", messageRulePredicates.sensitivity);
    writer.writeBooleanValue("sentCcMe", messageRulePredicates.sentCcMe);
    writer.writeBooleanValue("sentOnlyToMe", messageRulePredicates.sentOnlyToMe);
    writer.writeCollectionOfObjectValues<Recipient>("sentToAddresses", messageRulePredicates.sentToAddresses, serializeRecipient);
    writer.writeBooleanValue("sentToMe", messageRulePredicates.sentToMe);
    writer.writeBooleanValue("sentToOrCcMe", messageRulePredicates.sentToOrCcMe);
    writer.writeCollectionOfPrimitiveValues<string>("subjectContains", messageRulePredicates.subjectContains);
    writer.writeObjectValue<SizeRange>("withinSizeRange", messageRulePredicates.withinSizeRange, serializeSizeRange);
    writer.writeAdditionalData(messageRulePredicates.additionalData);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param MultiValueLegacyExtendedProperty The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeMultiValueLegacyExtendedProperty(writer: SerializationWriter, multiValueLegacyExtendedProperty: Partial<MultiValueLegacyExtendedProperty> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!multiValueLegacyExtendedProperty || isSerializingDerivedType) { return; }
    serializeEntity(writer, multiValueLegacyExtendedProperty, isSerializingDerivedType)
    writer.writeCollectionOfPrimitiveValues<string>("value", multiValueLegacyExtendedProperty.value);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param OnlineMeetingInfo The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeOnlineMeetingInfo(writer: SerializationWriter, onlineMeetingInfo: Partial<OnlineMeetingInfo> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!onlineMeetingInfo || isSerializingDerivedType) { return; }
    writer.writeStringValue("conferenceId", onlineMeetingInfo.conferenceId);
    writer.writeStringValue("joinUrl", onlineMeetingInfo.joinUrl);
    writer.writeStringValue("@odata.type", onlineMeetingInfo.odataType);
    writer.writeCollectionOfObjectValues<Phone>("phones", onlineMeetingInfo.phones, serializePhone);
    writer.writeStringValue("quickDial", onlineMeetingInfo.quickDial);
    writer.writeCollectionOfPrimitiveValues<string>("tollFreeNumbers", onlineMeetingInfo.tollFreeNumbers);
    writer.writeStringValue("tollNumber", onlineMeetingInfo.tollNumber);
    writer.writeAdditionalData(onlineMeetingInfo.additionalData);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param OpenTypeExtension The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeOpenTypeExtension(writer: SerializationWriter, openTypeExtension: Partial<OpenTypeExtension> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!openTypeExtension || isSerializingDerivedType) { return; }
    serializeExtension(writer, openTypeExtension, isSerializingDerivedType)
    writer.writeStringValue("extensionName", openTypeExtension.extensionName);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param OutlookGeoCoordinates The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeOutlookGeoCoordinates(writer: SerializationWriter, outlookGeoCoordinates: Partial<OutlookGeoCoordinates> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!outlookGeoCoordinates || isSerializingDerivedType) { return; }
    writer.writeNumberValue("accuracy", outlookGeoCoordinates.accuracy);
    writer.writeNumberValue("altitude", outlookGeoCoordinates.altitude);
    writer.writeNumberValue("altitudeAccuracy", outlookGeoCoordinates.altitudeAccuracy);
    writer.writeNumberValue("latitude", outlookGeoCoordinates.latitude);
    writer.writeNumberValue("longitude", outlookGeoCoordinates.longitude);
    writer.writeStringValue("@odata.type", outlookGeoCoordinates.odataType);
    writer.writeAdditionalData(outlookGeoCoordinates.additionalData);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param OutlookItem The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeOutlookItem(writer: SerializationWriter, outlookItem: Partial<OutlookItem> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!outlookItem || isSerializingDerivedType) { return; }
    serializeEntity(writer, outlookItem, isSerializingDerivedType)
    writer.writeCollectionOfPrimitiveValues<string>("categories", outlookItem.categories);
    writer.writeStringValue("changeKey", outlookItem.changeKey);
    writer.writeDateValue("createdDateTime", outlookItem.createdDateTime);
    writer.writeDateValue("lastModifiedDateTime", outlookItem.lastModifiedDateTime);
    switch (outlookItem.odataType) {
        case "#microsoft.graph.calendarSharingMessage":
            serializeCalendarSharingMessage(writer, outlookItem, true);
        break;
        case "#microsoft.graph.contact":
            serializeContact(writer, outlookItem, true);
        break;
        case "#microsoft.graph.event":
            serializeEvent(writer, outlookItem, true);
        break;
        case "#microsoft.graph.eventMessage":
            serializeEventMessage(writer, outlookItem, true);
        break;
        case "#microsoft.graph.eventMessageRequest":
            serializeEventMessageRequest(writer, outlookItem, true);
        break;
        case "#microsoft.graph.eventMessageResponse":
            serializeEventMessageResponse(writer, outlookItem, true);
        break;
        case "#microsoft.graph.message":
            serializeMessage(writer, outlookItem, true);
        break;
        case "#microsoft.graph.post":
            serializePost(writer, outlookItem, true);
        break;
    }
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param PatternedRecurrence The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializePatternedRecurrence(writer: SerializationWriter, patternedRecurrence: Partial<PatternedRecurrence> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!patternedRecurrence || isSerializingDerivedType) { return; }
    writer.writeStringValue("@odata.type", patternedRecurrence.odataType);
    writer.writeObjectValue<RecurrencePattern>("pattern", patternedRecurrence.pattern, serializeRecurrencePattern);
    writer.writeObjectValue<RecurrenceRange>("range", patternedRecurrence.range, serializeRecurrenceRange);
    writer.writeAdditionalData(patternedRecurrence.additionalData);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param Phone The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializePhone(writer: SerializationWriter, phone: Partial<Phone> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!phone || isSerializingDerivedType) { return; }
    writer.writeStringValue("language", phone.language);
    writer.writeStringValue("number", phone.number);
    writer.writeStringValue("@odata.type", phone.odataType);
    writer.writeStringValue("region", phone.region);
    writer.writeEnumValue<PhoneType>("type", phone.type);
    writer.writeAdditionalData(phone.additionalData);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param PhysicalAddress The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializePhysicalAddress(writer: SerializationWriter, physicalAddress: Partial<PhysicalAddress> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!physicalAddress || isSerializingDerivedType) { return; }
    writer.writeStringValue("city", physicalAddress.city);
    writer.writeStringValue("countryOrRegion", physicalAddress.countryOrRegion);
    writer.writeStringValue("@odata.type", physicalAddress.odataType);
    writer.writeStringValue("postalCode", physicalAddress.postalCode);
    writer.writeStringValue("state", physicalAddress.state);
    writer.writeStringValue("street", physicalAddress.street);
    writer.writeAdditionalData(physicalAddress.additionalData);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param Post The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializePost(writer: SerializationWriter, post: Partial<Post> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!post || isSerializingDerivedType) { return; }
    serializeOutlookItem(writer, post, isSerializingDerivedType)
    writer.writeCollectionOfObjectValues<Attachment>("attachments", post.attachments, serializeAttachment);
    writer.writeObjectValue<ItemBody>("body", post.body, serializeItemBody);
    writer.writeStringValue("conversationId", post.conversationId);
    writer.writeStringValue("conversationThreadId", post.conversationThreadId);
    writer.writeCollectionOfObjectValues<Extension>("extensions", post.extensions, serializeExtension);
    writer.writeObjectValue<Recipient>("from", post.from, serializeRecipient);
    writer.writeBooleanValue("hasAttachments", post.hasAttachments);
    writer.writeObjectValue<Post>("inReplyTo", post.inReplyTo, serializePost);
    writer.writeCollectionOfObjectValues<MultiValueLegacyExtendedProperty>("multiValueExtendedProperties", post.multiValueExtendedProperties, serializeMultiValueLegacyExtendedProperty);
    writer.writeCollectionOfObjectValues<Recipient>("newParticipants", post.newParticipants, serializeRecipient);
    writer.writeDateValue("receivedDateTime", post.receivedDateTime);
    writer.writeObjectValue<Recipient>("sender", post.sender, serializeRecipient);
    writer.writeCollectionOfObjectValues<SingleValueLegacyExtendedProperty>("singleValueExtendedProperties", post.singleValueExtendedProperties, serializeSingleValueLegacyExtendedProperty);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param ProfilePhoto The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeProfilePhoto(writer: SerializationWriter, profilePhoto: Partial<ProfilePhoto> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!profilePhoto || isSerializingDerivedType) { return; }
    serializeEntity(writer, profilePhoto, isSerializingDerivedType)
    writer.writeNumberValue("height", profilePhoto.height);
    writer.writeNumberValue("width", profilePhoto.width);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param Recipient The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeRecipient(writer: SerializationWriter, recipient: Partial<Recipient> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!recipient || isSerializingDerivedType) { return; }
    writer.writeObjectValue<EmailAddress>("emailAddress", recipient.emailAddress, serializeEmailAddress);
    writer.writeStringValue("@odata.type", recipient.odataType);
    writer.writeAdditionalData(recipient.additionalData);
    switch (recipient.odataType) {
        case "#microsoft.graph.attendee":
            serializeAttendee(writer, recipient, true);
        break;
        case "#microsoft.graph.attendeeBase":
            serializeAttendeeBase(writer, recipient, true);
        break;
    }
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param RecurrencePattern The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeRecurrencePattern(writer: SerializationWriter, recurrencePattern: Partial<RecurrencePattern> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!recurrencePattern || isSerializingDerivedType) { return; }
    writer.writeNumberValue("dayOfMonth", recurrencePattern.dayOfMonth);
    if(recurrencePattern.daysOfWeek)
    writer.writeCollectionOfEnumValues<DayOfWeek>("daysOfWeek", recurrencePattern.daysOfWeek);
    writer.writeEnumValue<DayOfWeek>("firstDayOfWeek", recurrencePattern.firstDayOfWeek);
    writer.writeEnumValue<WeekIndex>("index", recurrencePattern.index);
    writer.writeNumberValue("interval", recurrencePattern.interval);
    writer.writeNumberValue("month", recurrencePattern.month);
    writer.writeStringValue("@odata.type", recurrencePattern.odataType);
    writer.writeEnumValue<RecurrencePatternType>("type", recurrencePattern.type);
    writer.writeAdditionalData(recurrencePattern.additionalData);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param RecurrenceRange The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeRecurrenceRange(writer: SerializationWriter, recurrenceRange: Partial<RecurrenceRange> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!recurrenceRange || isSerializingDerivedType) { return; }
    writer.writeDateOnlyValue("endDate", recurrenceRange.endDate);
    writer.writeNumberValue("numberOfOccurrences", recurrenceRange.numberOfOccurrences);
    writer.writeStringValue("@odata.type", recurrenceRange.odataType);
    writer.writeStringValue("recurrenceTimeZone", recurrenceRange.recurrenceTimeZone);
    writer.writeDateOnlyValue("startDate", recurrenceRange.startDate);
    writer.writeEnumValue<RecurrenceRangeType>("type", recurrenceRange.type);
    writer.writeAdditionalData(recurrenceRange.additionalData);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param ReferenceAttachment The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeReferenceAttachment(writer: SerializationWriter, referenceAttachment: Partial<ReferenceAttachment> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!referenceAttachment || isSerializingDerivedType) { return; }
    serializeAttachment(writer, referenceAttachment, isSerializingDerivedType)
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param ResponseStatus The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeResponseStatus(writer: SerializationWriter, responseStatus: Partial<ResponseStatus> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!responseStatus || isSerializingDerivedType) { return; }
    writer.writeStringValue("@odata.type", responseStatus.odataType);
    writer.writeEnumValue<ResponseType>("response", responseStatus.response);
    writer.writeDateValue("time", responseStatus.time);
    writer.writeAdditionalData(responseStatus.additionalData);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param SingleValueLegacyExtendedProperty The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeSingleValueLegacyExtendedProperty(writer: SerializationWriter, singleValueLegacyExtendedProperty: Partial<SingleValueLegacyExtendedProperty> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!singleValueLegacyExtendedProperty || isSerializingDerivedType) { return; }
    serializeEntity(writer, singleValueLegacyExtendedProperty, isSerializingDerivedType)
    writer.writeStringValue("value", singleValueLegacyExtendedProperty.value);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param SizeRange The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeSizeRange(writer: SerializationWriter, sizeRange: Partial<SizeRange> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!sizeRange || isSerializingDerivedType) { return; }
    writer.writeNumberValue("maximumSize", sizeRange.maximumSize);
    writer.writeNumberValue("minimumSize", sizeRange.minimumSize);
    writer.writeStringValue("@odata.type", sizeRange.odataType);
    writer.writeAdditionalData(sizeRange.additionalData);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param TimeSlot The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeTimeSlot(writer: SerializationWriter, timeSlot: Partial<TimeSlot> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!timeSlot || isSerializingDerivedType) { return; }
    writer.writeObjectValue<DateTimeTimeZone>("end", timeSlot.end, serializeDateTimeTimeZone);
    writer.writeStringValue("@odata.type", timeSlot.odataType);
    writer.writeObjectValue<DateTimeTimeZone>("start", timeSlot.start, serializeDateTimeTimeZone);
    writer.writeAdditionalData(timeSlot.additionalData);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param UploadSession The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeUploadSession(writer: SerializationWriter, uploadSession: Partial<UploadSession> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!uploadSession || isSerializingDerivedType) { return; }
    writer.writeDateValue("expirationDateTime", uploadSession.expirationDateTime);
    writer.writeCollectionOfPrimitiveValues<string>("nextExpectedRanges", uploadSession.nextExpectedRanges);
    writer.writeStringValue("@odata.type", uploadSession.odataType);
    writer.writeStringValue("uploadUrl", uploadSession.uploadUrl);
    writer.writeAdditionalData(uploadSession.additionalData);
}
export interface SingleValueLegacyExtendedProperty extends Entity, Parsable {
    /**
     * A property value.
     */
    value?: string | null;
}
export interface SizeRange extends AdditionalDataHolder, Parsable {
    /**
     * The maximum size (in kilobytes) that an incoming message must have in order for a condition or exception to apply.
     */
    maximumSize?: number | null;
    /**
     * The minimum size (in kilobytes) that an incoming message must have in order for a condition or exception to apply.
     */
    minimumSize?: number | null;
    /**
     * The OdataType property
     */
    odataType?: string | null;
}
export interface TimeSlot extends AdditionalDataHolder, Parsable {
    /**
     * The end property
     */
    end?: DateTimeTimeZone | null;
    /**
     * The OdataType property
     */
    odataType?: string | null;
    /**
     * The start property
     */
    start?: DateTimeTimeZone | null;
}
export interface UploadSession extends AdditionalDataHolder, Parsable {
    /**
     * The date and time in UTC that the upload session expires. The complete file must be uploaded before this expiration time is reached. Each fragment uploaded during the session extends the expiration time.
     */
    expirationDateTime?: Date | null;
    /**
     * A collection of byte ranges that the server is missing for the file. These ranges are zero indexed and of the format 'start-end' (for example '0-26' to indicate the first 27 bytes of the file). When uploading files as Outlook attachments, instead of a collection of ranges, this property always indicates a single value '{start}', the location in the file where the next upload should begin.
     */
    nextExpectedRanges?: string[] | null;
    /**
     * The OdataType property
     */
    odataType?: string | null;
    /**
     * The URL endpoint that accepts PUT requests for byte ranges of the file.
     */
    uploadUrl?: string | null;
}
export type WeekIndex = (typeof WeekIndexObject)[keyof typeof WeekIndexObject];
export const AttachmentTypeObject = {
    File: "file",
    Item: "item",
    Reference: "reference",
} as const;
export const AttendeeTypeObject = {
    Required: "required",
    Optional: "optional",
    Resource: "resource",
} as const;
export const BodyTypeObject = {
    Text: "text",
    Html: "html",
} as const;
export const CalendarColorObject = {
    Auto: "auto",
    LightBlue: "lightBlue",
    LightGreen: "lightGreen",
    LightOrange: "lightOrange",
    LightGray: "lightGray",
    LightYellow: "lightYellow",
    LightTeal: "lightTeal",
    LightPink: "lightPink",
    LightBrown: "lightBrown",
    LightRed: "lightRed",
    MaxColor: "maxColor",
} as const;
export const CalendarRoleTypeObject = {
    None: "none",
    FreeBusyRead: "freeBusyRead",
    LimitedRead: "limitedRead",
    Read: "read",
    Write: "write",
    DelegateWithoutPrivateEventAccess: "delegateWithoutPrivateEventAccess",
    DelegateWithPrivateEventAccess: "delegateWithPrivateEventAccess",
    Custom: "custom",
} as const;
export const CalendarSharingActionImportanceObject = {
    Primary: "primary",
    Secondary: "secondary",
} as const;
export const CalendarSharingActionObject = {
    Accept: "accept",
    AcceptAndViewCalendar: "acceptAndViewCalendar",
    ViewCalendar: "viewCalendar",
    AddThisCalendar: "addThisCalendar",
} as const;
export const CalendarSharingActionTypeObject = {
    Accept: "accept",
} as const;
export const DayOfWeekObject = {
    Sunday: "sunday",
    Monday: "monday",
    Tuesday: "tuesday",
    Wednesday: "wednesday",
    Thursday: "thursday",
    Friday: "friday",
    Saturday: "saturday",
} as const;
export const EventTypeObject = {
    SingleInstance: "singleInstance",
    Occurrence: "occurrence",
    Exception: "exception",
    SeriesMaster: "seriesMaster",
} as const;
export const FollowupFlagStatusObject = {
    NotFlagged: "notFlagged",
    Complete: "complete",
    Flagged: "flagged",
} as const;
export const FreeBusyStatusObject = {
    Unknown: "unknown",
    Free: "free",
    Tentative: "tentative",
    Busy: "busy",
    Oof: "oof",
    WorkingElsewhere: "workingElsewhere",
} as const;
export const ImportanceObject = {
    Low: "low",
    Normal: "normal",
    High: "high",
} as const;
export const InferenceClassificationTypeObject = {
    Focused: "focused",
    Other: "other",
} as const;
export const LocationTypeObject = {
    DefaultEscaped: "default",
    ConferenceRoom: "conferenceRoom",
    HomeAddress: "homeAddress",
    BusinessAddress: "businessAddress",
    GeoCoordinates: "geoCoordinates",
    StreetAddress: "streetAddress",
    Hotel: "hotel",
    Restaurant: "restaurant",
    LocalBusiness: "localBusiness",
    PostalAddress: "postalAddress",
} as const;
export const LocationUniqueIdTypeObject = {
    Unknown: "unknown",
    LocationStore: "locationStore",
    Directory: "directory",
    Private: "private",
    Bing: "bing",
} as const;
export const MeetingMessageTypeObject = {
    None: "none",
    MeetingRequest: "meetingRequest",
    MeetingCancelled: "meetingCancelled",
    MeetingAccepted: "meetingAccepted",
    MeetingTenativelyAccepted: "meetingTenativelyAccepted",
    MeetingDeclined: "meetingDeclined",
} as const;
export const MeetingRequestTypeObject = {
    None: "none",
    NewMeetingRequest: "newMeetingRequest",
    FullUpdate: "fullUpdate",
    InformationalUpdate: "informationalUpdate",
    SilentUpdate: "silentUpdate",
    Outdated: "outdated",
    PrincipalWantsCopy: "principalWantsCopy",
} as const;
export const MessageActionFlagObject = {
    Any: "any",
    Call: "call",
    DoNotForward: "doNotForward",
    FollowUp: "followUp",
    Fyi: "fyi",
    Forward: "forward",
    NoResponseNecessary: "noResponseNecessary",
    Read: "read",
    Reply: "reply",
    ReplyToAll: "replyToAll",
    Review: "review",
} as const;
export const OnlineMeetingProviderTypeObject = {
    Unknown: "unknown",
    SkypeForBusiness: "skypeForBusiness",
    SkypeForConsumer: "skypeForConsumer",
    TeamsForBusiness: "teamsForBusiness",
} as const;
export const PhoneTypeObject = {
    Home: "home",
    Business: "business",
    Mobile: "mobile",
    Other: "other",
    Assistant: "assistant",
    HomeFax: "homeFax",
    BusinessFax: "businessFax",
    OtherFax: "otherFax",
    Pager: "pager",
    Radio: "radio",
} as const;
export const RecurrencePatternTypeObject = {
    Daily: "daily",
    Weekly: "weekly",
    AbsoluteMonthly: "absoluteMonthly",
    RelativeMonthly: "relativeMonthly",
    AbsoluteYearly: "absoluteYearly",
    RelativeYearly: "relativeYearly",
} as const;
export const RecurrenceRangeTypeObject = {
    EndDate: "endDate",
    NoEnd: "noEnd",
    Numbered: "numbered",
} as const;
export const ResponseTypeObject = {
    None: "none",
    Organizer: "organizer",
    TentativelyAccepted: "tentativelyAccepted",
    Accepted: "accepted",
    Declined: "declined",
    NotResponded: "notResponded",
} as const;
export const SensitivityObject = {
    Normal: "normal",
    Personal: "personal",
    Private: "private",
    Confidential: "confidential",
} as const;
export const WeekIndexObject = {
    First: "first",
    Second: "second",
    Third: "third",
    Fourth: "fourth",
    Last: "last",
} as const;
/* tslint:enable */
/* eslint-enable */
